# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_bdk_38a5_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_bdk_38a5_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_bdk_38a5_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder():
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer after consuming")
        finally:
            self.free()

    # For every type that lowers into a RustBuffer, we provide helper methods for
    # conveniently doing the lifting and lowering. Putting them on this internal
    # helper object (rather than, say, as methods on the public classes) makes it
    # easier for us to hide these implementation details from consumers, in the face
    # of python's free-for-all type system.

    # The primitive String type.

    @staticmethod
    def allocFromString(value):
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

    def consumeIntoString(self):
        with self.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    # The Record type Confirmation.

    @staticmethod
    def allocFromTypeConfirmation(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeConfirmation(builder, v)
            return builder.finalize()

    def consumeIntoTypeConfirmation(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeConfirmation(stream)

    # The Record type ElectrumConfig.

    @staticmethod
    def allocFromTypeElectrumConfig(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeElectrumConfig(builder, v)
            return builder.finalize()

    def consumeIntoTypeElectrumConfig(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeElectrumConfig(stream)

    # The Record type EsploraConfig.

    @staticmethod
    def allocFromTypeEsploraConfig(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeEsploraConfig(builder, v)
            return builder.finalize()

    def consumeIntoTypeEsploraConfig(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeEsploraConfig(stream)

    # The Record type ExtendedKeyInfo.

    @staticmethod
    def allocFromTypeExtendedKeyInfo(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeExtendedKeyInfo(builder, v)
            return builder.finalize()

    def consumeIntoTypeExtendedKeyInfo(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeExtendedKeyInfo(stream)

    # The Record type SledDbConfiguration.

    @staticmethod
    def allocFromTypeSledDbConfiguration(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeSledDbConfiguration(builder, v)
            return builder.finalize()

    def consumeIntoTypeSledDbConfiguration(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeSledDbConfiguration(stream)

    # The Record type TransactionDetails.

    @staticmethod
    def allocFromTypeTransactionDetails(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeTransactionDetails(builder, v)
            return builder.finalize()

    def consumeIntoTypeTransactionDetails(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeTransactionDetails(stream)

    # The Enum type BlockchainConfig.

    @staticmethod
    def allocFromTypeBlockchainConfig(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeBlockchainConfig(builder, v)
            return builder.finalize()

    def consumeIntoTypeBlockchainConfig(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeBlockchainConfig(stream)

    # The Enum type DatabaseConfig.

    @staticmethod
    def allocFromTypeDatabaseConfig(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeDatabaseConfig(builder, v)
            return builder.finalize()

    def consumeIntoTypeDatabaseConfig(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeDatabaseConfig(stream)

    # The Enum type MnemonicType.

    @staticmethod
    def allocFromTypeMnemonicType(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeMnemonicType(builder, v)
            return builder.finalize()

    def consumeIntoTypeMnemonicType(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeMnemonicType(stream)

    # The Enum type Network.

    @staticmethod
    def allocFromTypeNetwork(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeNetwork(builder, v)
            return builder.finalize()

    def consumeIntoTypeNetwork(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeNetwork(stream)

    # The Enum type Transaction.

    @staticmethod
    def allocFromTypeTransaction(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeTransaction(builder, v)
            return builder.finalize()

    def consumeIntoTypeTransaction(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeTransaction(stream)

    # The Optional<T> type for u8.

    @staticmethod
    def allocFromOptionalu8(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeOptionalu8(builder, v)
            return builder.finalize()

    def consumeIntoOptionalu8(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readOptionalu8(stream)

    # The Optional<T> type for u64.

    @staticmethod
    def allocFromOptionalu64(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeOptionalu64(builder, v)
            return builder.finalize()

    def consumeIntoOptionalu64(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readOptionalu64(stream)

    # The Optional<T> type for f32.

    @staticmethod
    def allocFromOptionalf32(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeOptionalf32(builder, v)
            return builder.finalize()

    def consumeIntoOptionalf32(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readOptionalf32(stream)

    # The Optional<T> type for string.

    @staticmethod
    def allocFromOptionalstring(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeOptionalstring(builder, v)
            return builder.finalize()

    def consumeIntoOptionalstring(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readOptionalstring(stream)

    # The Sequence<T> type for TypeTransaction.

    @staticmethod
    def allocFromSequenceTypeTransaction(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeSequenceTypeTransaction(builder, v)
            return builder.finalize()

    def consumeIntoSequenceTypeTransaction(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readSequenceTypeTransaction(stream)


class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])

class RustBufferStream(object):
    # Helper for structured reading of bytes from a RustBuffer

    def __init__(self, rbuf):
        self.rbuf = rbuf
        self.offset = 0

    def remaining(self):
        return self.rbuf.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.rbuf.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        data = self.rbuf.data[self.offset:self.offset+size]
        self.offset += size
        return data

class RustBufferTypeReader(object):
    # For every type used in the interface, we provide helper methods for conveniently
    # reading that type in a buffer. Putting them on this internal helper object (rather
    # than, say, as methods on the public classes) makes it easier for us to hide these
    # implementation details from consumers, in the face of python's free-for-all type
    # system.
    # This class holds the logic for *how* to read the types from a buffer - the buffer itself is
    # always passed in, because the actual buffer might be owned by a different crate/module.

    @staticmethod
    def readU8(stream):
        return stream._unpack_from(1, ">B")

    @staticmethod
    def readU32(stream):
        return stream._unpack_from(4, ">I")

    @staticmethod
    def readU64(stream):
        return stream._unpack_from(8, ">Q")

    @staticmethod
    def readF32(stream):
        v = stream._unpack_from(4, ">f")
        return v

    @staticmethod
    def readString(stream):
        size = stream._unpack_from(4, ">i")
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = stream.read(size)
        return utf8Bytes.decode("utf-8")

    # The Object type OfflineWallet.

    @staticmethod
    def readTypeOfflineWallet(stream):
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        pointer = stream._unpack_from(8, ">Q")
        return OfflineWallet._make_instance_(pointer)

    # The Object type OnlineWallet.

    @staticmethod
    def readTypeOnlineWallet(stream):
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        pointer = stream._unpack_from(8, ">Q")
        return OnlineWallet._make_instance_(pointer)

    # The Object type PartiallySignedBitcoinTransaction.

    @staticmethod
    def readTypePartiallySignedBitcoinTransaction(stream):
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        pointer = stream._unpack_from(8, ">Q")
        return PartiallySignedBitcoinTransaction._make_instance_(pointer)

    # The Record type Confirmation.

    @classmethod
    def readTypeConfirmation(cls, stream):
        return Confirmation(
            cls.readU32(stream),
            cls.readU64(stream)
        )

    # The Record type ElectrumConfig.

    @classmethod
    def readTypeElectrumConfig(cls, stream):
        return ElectrumConfig(
            cls.readString(stream),
            cls.readOptionalstring(stream),
            cls.readU8(stream),
            cls.readOptionalu8(stream),
            cls.readU64(stream)
        )

    # The Record type EsploraConfig.

    @classmethod
    def readTypeEsploraConfig(cls, stream):
        return EsploraConfig(
            cls.readString(stream),
            cls.readOptionalstring(stream),
            cls.readU64(stream),
            cls.readU64(stream),
            cls.readU64(stream)
        )

    # The Record type ExtendedKeyInfo.

    @classmethod
    def readTypeExtendedKeyInfo(cls, stream):
        return ExtendedKeyInfo(
            cls.readString(stream),
            cls.readString(stream),
            cls.readString(stream)
        )

    # The Record type SledDbConfiguration.

    @classmethod
    def readTypeSledDbConfiguration(cls, stream):
        return SledDbConfiguration(
            cls.readString(stream),
            cls.readString(stream)
        )

    # The Record type TransactionDetails.

    @classmethod
    def readTypeTransactionDetails(cls, stream):
        return TransactionDetails(
            cls.readOptionalu64(stream),
            cls.readU64(stream),
            cls.readU64(stream),
            cls.readString(stream)
        )

    # The Enum type BlockchainConfig.

    @classmethod
    def readTypeBlockchainConfig(cls, stream):
        variant = stream._unpack_from(4, ">i")

        if variant == 1:
            return BlockchainConfig.ELECTRUM(
                cls.readTypeElectrumConfig(stream)
            )

        if variant == 2:
            return BlockchainConfig.ESPLORA(
                cls.readTypeEsploraConfig(stream)
            )

        raise InternalError("Unexpected variant tag for TypeBlockchainConfig")

    # The Enum type DatabaseConfig.

    @classmethod
    def readTypeDatabaseConfig(cls, stream):
        variant = stream._unpack_from(4, ">i")

        if variant == 1:
            return DatabaseConfig.MEMORY(
                cls.readString(stream)
            )

        if variant == 2:
            return DatabaseConfig.SLED(
                cls.readTypeSledDbConfiguration(stream)
            )

        raise InternalError("Unexpected variant tag for TypeDatabaseConfig")

    # The Enum type MnemonicType.

    @classmethod
    def readTypeMnemonicType(cls, stream):
        variant = stream._unpack_from(4, ">i")
        return MnemonicType(variant)

    # The Enum type Network.

    @classmethod
    def readTypeNetwork(cls, stream):
        variant = stream._unpack_from(4, ">i")
        return Network(variant)

    # The Enum type Transaction.

    @classmethod
    def readTypeTransaction(cls, stream):
        variant = stream._unpack_from(4, ">i")

        if variant == 1:
            return Transaction.UNCONFIRMED(
                cls.readTypeTransactionDetails(stream)
            )

        if variant == 2:
            return Transaction.CONFIRMED(
                cls.readTypeTransactionDetails(stream),
                cls.readTypeConfirmation(stream)
            )

        raise InternalError("Unexpected variant tag for TypeTransaction")



    # The Error type BdkError

    # Top-level read method
    @classmethod
    def readTypeBdkError(cls, stream):
        variant = stream._unpack_from(4, ">i")
        try:
            read_variant_method = getattr(cls, 'readVariant{}OfTypeBdkError'.format(variant))
        except AttributeError:
            raise InternalError("Unexpected variant value for error TypeBdkError ({})".format(variant))
        return read_variant_method(stream)

    # Read methods for each individual variants

    @classmethod
    def readVariant1OfTypeBdkError(cls, stream):
        return BdkError.InvalidU32Bytes(cls.readString(stream))

    @classmethod
    def readVariant2OfTypeBdkError(cls, stream):
        return BdkError.Generic(cls.readString(stream))

    @classmethod
    def readVariant3OfTypeBdkError(cls, stream):
        return BdkError.ScriptDoesntHaveAddressForm(cls.readString(stream))

    @classmethod
    def readVariant4OfTypeBdkError(cls, stream):
        return BdkError.NoRecipients(cls.readString(stream))

    @classmethod
    def readVariant5OfTypeBdkError(cls, stream):
        return BdkError.NoUtxosSelected(cls.readString(stream))

    @classmethod
    def readVariant6OfTypeBdkError(cls, stream):
        return BdkError.OutputBelowDustLimit(cls.readString(stream))

    @classmethod
    def readVariant7OfTypeBdkError(cls, stream):
        return BdkError.InsufficientFunds(cls.readString(stream))

    @classmethod
    def readVariant8OfTypeBdkError(cls, stream):
        return BdkError.BnBTotalTriesExceeded(cls.readString(stream))

    @classmethod
    def readVariant9OfTypeBdkError(cls, stream):
        return BdkError.BnBNoExactMatch(cls.readString(stream))

    @classmethod
    def readVariant10OfTypeBdkError(cls, stream):
        return BdkError.UnknownUtxo(cls.readString(stream))

    @classmethod
    def readVariant11OfTypeBdkError(cls, stream):
        return BdkError.TransactionNotFound(cls.readString(stream))

    @classmethod
    def readVariant12OfTypeBdkError(cls, stream):
        return BdkError.TransactionConfirmed(cls.readString(stream))

    @classmethod
    def readVariant13OfTypeBdkError(cls, stream):
        return BdkError.IrreplaceableTransaction(cls.readString(stream))

    @classmethod
    def readVariant14OfTypeBdkError(cls, stream):
        return BdkError.FeeRateTooLow(cls.readString(stream))

    @classmethod
    def readVariant15OfTypeBdkError(cls, stream):
        return BdkError.FeeTooLow(cls.readString(stream))

    @classmethod
    def readVariant16OfTypeBdkError(cls, stream):
        return BdkError.FeeRateUnavailable(cls.readString(stream))

    @classmethod
    def readVariant17OfTypeBdkError(cls, stream):
        return BdkError.MissingKeyOrigin(cls.readString(stream))

    @classmethod
    def readVariant18OfTypeBdkError(cls, stream):
        return BdkError.Key(cls.readString(stream))

    @classmethod
    def readVariant19OfTypeBdkError(cls, stream):
        return BdkError.ChecksumMismatch(cls.readString(stream))

    @classmethod
    def readVariant20OfTypeBdkError(cls, stream):
        return BdkError.SpendingPolicyRequired(cls.readString(stream))

    @classmethod
    def readVariant21OfTypeBdkError(cls, stream):
        return BdkError.InvalidPolicyPathError(cls.readString(stream))

    @classmethod
    def readVariant22OfTypeBdkError(cls, stream):
        return BdkError.Signer(cls.readString(stream))

    @classmethod
    def readVariant23OfTypeBdkError(cls, stream):
        return BdkError.InvalidNetwork(cls.readString(stream))

    @classmethod
    def readVariant24OfTypeBdkError(cls, stream):
        return BdkError.InvalidProgressValue(cls.readString(stream))

    @classmethod
    def readVariant25OfTypeBdkError(cls, stream):
        return BdkError.ProgressUpdateError(cls.readString(stream))

    @classmethod
    def readVariant26OfTypeBdkError(cls, stream):
        return BdkError.InvalidOutpoint(cls.readString(stream))

    @classmethod
    def readVariant27OfTypeBdkError(cls, stream):
        return BdkError.Descriptor(cls.readString(stream))

    @classmethod
    def readVariant28OfTypeBdkError(cls, stream):
        return BdkError.AddressValidator(cls.readString(stream))

    @classmethod
    def readVariant29OfTypeBdkError(cls, stream):
        return BdkError.Encode(cls.readString(stream))

    @classmethod
    def readVariant30OfTypeBdkError(cls, stream):
        return BdkError.Miniscript(cls.readString(stream))

    @classmethod
    def readVariant31OfTypeBdkError(cls, stream):
        return BdkError.Bip32(cls.readString(stream))

    @classmethod
    def readVariant32OfTypeBdkError(cls, stream):
        return BdkError.Secp256k1(cls.readString(stream))

    @classmethod
    def readVariant33OfTypeBdkError(cls, stream):
        return BdkError.Json(cls.readString(stream))

    @classmethod
    def readVariant34OfTypeBdkError(cls, stream):
        return BdkError.Hex(cls.readString(stream))

    @classmethod
    def readVariant35OfTypeBdkError(cls, stream):
        return BdkError.Psbt(cls.readString(stream))

    @classmethod
    def readVariant36OfTypeBdkError(cls, stream):
        return BdkError.PsbtParse(cls.readString(stream))

    @classmethod
    def readVariant37OfTypeBdkError(cls, stream):
        return BdkError.Electrum(cls.readString(stream))

    @classmethod
    def readVariant38OfTypeBdkError(cls, stream):
        return BdkError.Esplora(cls.readString(stream))

    @classmethod
    def readVariant39OfTypeBdkError(cls, stream):
        return BdkError.Sled(cls.readString(stream))

    # The Optional<T> type for u8.

    @classmethod
    def readOptionalu8(cls, stream):
        flag = stream._unpack_from(1, ">b")
        if flag == 0:
            return None
        elif flag == 1:
            return cls.readU8(stream)
        else:
            raise InternalError("Unexpected flag byte for Optionalu8")

    # The Optional<T> type for u64.

    @classmethod
    def readOptionalu64(cls, stream):
        flag = stream._unpack_from(1, ">b")
        if flag == 0:
            return None
        elif flag == 1:
            return cls.readU64(stream)
        else:
            raise InternalError("Unexpected flag byte for Optionalu64")

    # The Optional<T> type for f32.

    @classmethod
    def readOptionalf32(cls, stream):
        flag = stream._unpack_from(1, ">b")
        if flag == 0:
            return None
        elif flag == 1:
            return cls.readF32(stream)
        else:
            raise InternalError("Unexpected flag byte for Optionalf32")

    # The Optional<T> type for string.

    @classmethod
    def readOptionalstring(cls, stream):
        flag = stream._unpack_from(1, ">b")
        if flag == 0:
            return None
        elif flag == 1:
            return cls.readString(stream)
        else:
            raise InternalError("Unexpected flag byte for Optionalstring")

    # The Sequence<T> type for TypeTransaction.

    @classmethod
    def readSequenceTypeTransaction(cls, stream):
        count = stream._unpack_from(4, ">i")
        if count < 0:
            raise InternalError("Unexpected negative sequence length")
        items = []
        while count > 0:
            items.append(cls.readTypeTransaction(stream))
            count -= 1
        return items

class RustBufferBuilder(object):
    # Helper for structured writing of bytes into a RustBuffer.

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

class RustBufferTypeBuilder(object):
    # For every type used in the interface, we provide helper methods for conveniently
    # writing values of that type in a buffer. Putting them on this internal helper object
    # (rather than, say, as methods on the public classes) makes it easier for us to hide
    # these implementation details from consumers, in the face of python's free-for-all
    # type system.
    # This class holds the logic for *how* to write the types to a buffer - the buffer itself is
    # always passed in, because the actual buffer might be owned by a different crate/module.

    @staticmethod
    def writeU8(builder, v):
        builder._pack_into(1, ">B", v)

    @staticmethod
    def writeU32(builder, v):
        builder._pack_into(4, ">I", v)

    @staticmethod
    def writeU64(builder, v):
        builder._pack_into(8, ">Q", v)

    @staticmethod
    def writeF32(builder, v):
        builder._pack_into(4, ">f", v)

    @staticmethod
    def writeString(builder, v):
        utf8Bytes = v.encode("utf-8")
        builder._pack_into(4, ">i", len(utf8Bytes))
        builder.write(utf8Bytes)

    # The Object type OfflineWallet.
    # We write the pointer value directly - what could possibly go wrong?

    @classmethod
    def writeTypeOfflineWallet(cls, builder, v):
        if not isinstance(v, OfflineWallet):
            raise TypeError("Expected OfflineWallet instance, {} found".format(v.__class__.__name__))
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        cls.writeU64(builder, v._pointer)

    # The Object type OnlineWallet.
    # We write the pointer value directly - what could possibly go wrong?

    @classmethod
    def writeTypeOnlineWallet(cls, builder, v):
        if not isinstance(v, OnlineWallet):
            raise TypeError("Expected OnlineWallet instance, {} found".format(v.__class__.__name__))
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        cls.writeU64(builder, v._pointer)

    # The Object type PartiallySignedBitcoinTransaction.
    # We write the pointer value directly - what could possibly go wrong?

    @classmethod
    def writeTypePartiallySignedBitcoinTransaction(cls, builder, v):
        if not isinstance(v, PartiallySignedBitcoinTransaction):
            raise TypeError("Expected PartiallySignedBitcoinTransaction instance, {} found".format(v.__class__.__name__))
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        cls.writeU64(builder, v._pointer)

    # The Record type Confirmation.

    @classmethod
    def writeTypeConfirmation(cls, builder, v):
        cls.writeU32(builder, v.height)
        cls.writeU64(builder, v.timestamp)

    # The Record type ElectrumConfig.

    @classmethod
    def writeTypeElectrumConfig(cls, builder, v):
        cls.writeString(builder, v.url)
        cls.writeOptionalstring(builder, v.socks5)
        cls.writeU8(builder, v.retry)
        cls.writeOptionalu8(builder, v.timeout)
        cls.writeU64(builder, v.stop_gap)

    # The Record type EsploraConfig.

    @classmethod
    def writeTypeEsploraConfig(cls, builder, v):
        cls.writeString(builder, v.base_url)
        cls.writeOptionalstring(builder, v.proxy)
        cls.writeU64(builder, v.timeout_read)
        cls.writeU64(builder, v.timeout_write)
        cls.writeU64(builder, v.stop_gap)

    # The Record type ExtendedKeyInfo.

    @classmethod
    def writeTypeExtendedKeyInfo(cls, builder, v):
        cls.writeString(builder, v.mnemonic)
        cls.writeString(builder, v.xprv)
        cls.writeString(builder, v.fingerprint)

    # The Record type SledDbConfiguration.

    @classmethod
    def writeTypeSledDbConfiguration(cls, builder, v):
        cls.writeString(builder, v.path)
        cls.writeString(builder, v.tree_name)

    # The Record type TransactionDetails.

    @classmethod
    def writeTypeTransactionDetails(cls, builder, v):
        cls.writeOptionalu64(builder, v.fees)
        cls.writeU64(builder, v.received)
        cls.writeU64(builder, v.sent)
        cls.writeString(builder, v.txid)

    # The Enum type BlockchainConfig.

    @classmethod
    def writeTypeBlockchainConfig(cls, builder, v):
        if v.is_electrum():
            builder._pack_into(4, ">i", 1)
            cls.writeTypeElectrumConfig(builder, v.config)
        if v.is_esplora():
            builder._pack_into(4, ">i", 2)
            cls.writeTypeEsploraConfig(builder, v.config)

    # The Enum type DatabaseConfig.

    @classmethod
    def writeTypeDatabaseConfig(cls, builder, v):
        if v.is_memory():
            builder._pack_into(4, ">i", 1)
            cls.writeString(builder, v.junk)
        if v.is_sled():
            builder._pack_into(4, ">i", 2)
            cls.writeTypeSledDbConfiguration(builder, v.config)

    # The Enum type MnemonicType.

    @classmethod
    def writeTypeMnemonicType(cls, builder, v):
        builder._pack_into(4, ">i", v.value)

    # The Enum type Network.

    @classmethod
    def writeTypeNetwork(cls, builder, v):
        builder._pack_into(4, ">i", v.value)

    # The Enum type Transaction.

    @classmethod
    def writeTypeTransaction(cls, builder, v):
        if v.is_unconfirmed():
            builder._pack_into(4, ">i", 1)
            cls.writeTypeTransactionDetails(builder, v.details)
        if v.is_confirmed():
            builder._pack_into(4, ">i", 2)
            cls.writeTypeTransactionDetails(builder, v.details)
            cls.writeTypeConfirmation(builder, v.confirmation)# This type cannot currently be serialized, but we can produce a helpful error.

    @staticmethod
    def writeTypeBdkError(self, builder):
        raise InternalError("RustBufferStream.write() not implemented yet for TypeBdkError")

    # The Optional<T> type for u8.

    @classmethod
    def writeOptionalu8(cls, builder, v):
        if v is None:
            builder._pack_into(1, ">b", 0)
        else:
            builder._pack_into(1, ">b", 1)
            cls.writeU8(builder, v)

    # The Optional<T> type for u64.

    @classmethod
    def writeOptionalu64(cls, builder, v):
        if v is None:
            builder._pack_into(1, ">b", 0)
        else:
            builder._pack_into(1, ">b", 1)
            cls.writeU64(builder, v)

    # The Optional<T> type for f32.

    @classmethod
    def writeOptionalf32(cls, builder, v):
        if v is None:
            builder._pack_into(1, ">b", 0)
        else:
            builder._pack_into(1, ">b", 1)
            cls.writeF32(builder, v)

    # The Optional<T> type for string.

    @classmethod
    def writeOptionalstring(cls, builder, v):
        if v is None:
            builder._pack_into(1, ">b", 0)
        else:
            builder._pack_into(1, ">b", 1)
            cls.writeString(builder, v)

    # The Sequence<T> type for TypeTransaction.

    @classmethod
    def writeSequenceTypeTransaction(cls, builder, items):
        builder._pack_into(4, ">i", len(items))
        for item in items:
            cls.writeTypeTransaction(builder, item)

# Error definitions
class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_SUCCESS)"
        else:
            return "RustCallStatus(<invalid code>)"

class BdkError:

    # Each variant is a nested class of the error itself.
    # It just carries a string error message, so no special implementation is necessary.
    class InvalidU32Bytes(Exception):
        pass
    class Generic(Exception):
        pass
    class ScriptDoesntHaveAddressForm(Exception):
        pass
    class NoRecipients(Exception):
        pass
    class NoUtxosSelected(Exception):
        pass
    class OutputBelowDustLimit(Exception):
        pass
    class InsufficientFunds(Exception):
        pass
    class BnBTotalTriesExceeded(Exception):
        pass
    class BnBNoExactMatch(Exception):
        pass
    class UnknownUtxo(Exception):
        pass
    class TransactionNotFound(Exception):
        pass
    class TransactionConfirmed(Exception):
        pass
    class IrreplaceableTransaction(Exception):
        pass
    class FeeRateTooLow(Exception):
        pass
    class FeeTooLow(Exception):
        pass
    class FeeRateUnavailable(Exception):
        pass
    class MissingKeyOrigin(Exception):
        pass
    class Key(Exception):
        pass
    class ChecksumMismatch(Exception):
        pass
    class SpendingPolicyRequired(Exception):
        pass
    class InvalidPolicyPathError(Exception):
        pass
    class Signer(Exception):
        pass
    class InvalidNetwork(Exception):
        pass
    class InvalidProgressValue(Exception):
        pass
    class ProgressUpdateError(Exception):
        pass
    class InvalidOutpoint(Exception):
        pass
    class Descriptor(Exception):
        pass
    class AddressValidator(Exception):
        pass
    class Encode(Exception):
        pass
    class Miniscript(Exception):
        pass
    class Bip32(Exception):
        pass
    class Secp256k1(Exception):
        pass
    class Json(Exception):
        pass
    class Hex(Exception):
        pass
    class Psbt(Exception):
        pass
    class PsbtParse(Exception):
        pass
    class Electrum(Exception):
        pass
    class Esplora(Exception):
        pass
    class Sled(Exception):
        pass

# Map error classes to the RustBufferTypeBuilder method to read them
_error_class_to_reader_method = {
    BdkError: RustBufferTypeReader.readTypeBdkError,
}

def consume_buffer_into_error(error_class, rust_buffer):
    reader_method = _error_class_to_reader_method[error_class]
    with rust_buffer.consumeWithStream() as stream:
        return reader_method(stream)

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_class, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_class must be set to the error class that corresponds to the result.
    call_status = RustCallStatus(code=0, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        return result
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_class is None:
            call_status.err_buf.contents.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but no error class set")
        else:
            raise consume_buffer_into_error(error_class, call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = call_status.error_buf.consumeIntoString()
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# This is how we find and load the dynamic library provided by the component.
# For now we just look it up by name.
#
# XXX TODO: This will probably grow some magic for resolving megazording in future.
# E.g. we might start by looking for the named component in `libuniffi.so` and if
# that fails, fall back to loading it separately from `lib${componentName}.so`.

# this is the original code coming from the auto-generated bindings
# I currently cannot make the package find the bitcoindevkit library with this function as-is
# see slight revision next
# def loadIndirect():
#     if sys.platform == "linux":
#         libname = "lib{}.so"
#     elif sys.platform == "darwin":
#         libname = "lib{}.dylib"
#     elif sys.platform.startswith("win"):
#         # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
#         # We could use `os.add_dll_directory` to configure the search path, but
#         # it doesn't feel right to mess with application-wide settings. Let's
#         # assume that the `.dll` is next to the `.py` file and load by full path.
#         libname = os.path.join(
#             os.path.dirname(__file__),
#             "{}.dll",
#         )
#     return getattr(ctypes.cdll, libname.format("bdkffi"))

def loadIndirect():
  if sys.platform == "linux":
    # libname = "lib{}.so"
    libname = os.path.join(os.path.dirname(__file__), "lib{}.so")
  elif sys.platform == "darwin":
    # libname = "lib{}.dylib"
    libname = os.path.join(os.path.dirname(__file__), "lib{}.dylib")
  elif sys.platform.startswith("win"):
    # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
    # We could use `os.add_dll_directory` to configure the search path, but
    # it doesn't feel right to mess with application-wide settings. Let's
    # assume that the `.dll` is next to the `.py` file and load by full path.
    libname = os.path.join(
      os.path.dirname(__file__),
      "{}.dll",
    )
  return getattr(ctypes.cdll, libname.format("bdkffi"))

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.ffi_bdk_38a5_OfflineWallet_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_bdk_38a5_OfflineWallet_object_free.restype = None
_UniFFILib.bdk_38a5_OfflineWallet_new.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OfflineWallet_new.restype = ctypes.c_void_p
_UniFFILib.bdk_38a5_OfflineWallet_get_new_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OfflineWallet_get_new_address.restype = RustBuffer
_UniFFILib.bdk_38a5_OfflineWallet_get_last_unused_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OfflineWallet_get_last_unused_address.restype = RustBuffer
_UniFFILib.bdk_38a5_OfflineWallet_get_balance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OfflineWallet_get_balance.restype = ctypes.c_uint64
_UniFFILib.bdk_38a5_OfflineWallet_sign.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OfflineWallet_sign.restype = None
_UniFFILib.bdk_38a5_OfflineWallet_get_transactions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OfflineWallet_get_transactions.restype = RustBuffer
_UniFFILib.ffi_bdk_38a5_OnlineWallet_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_bdk_38a5_OnlineWallet_object_free.restype = None
_UniFFILib.bdk_38a5_OnlineWallet_new.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OnlineWallet_new.restype = ctypes.c_void_p
_UniFFILib.bdk_38a5_OnlineWallet_get_new_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OnlineWallet_get_new_address.restype = RustBuffer
_UniFFILib.bdk_38a5_OnlineWallet_get_last_unused_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OnlineWallet_get_last_unused_address.restype = RustBuffer
_UniFFILib.bdk_38a5_OnlineWallet_get_balance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OnlineWallet_get_balance.restype = ctypes.c_uint64
_UniFFILib.bdk_38a5_OnlineWallet_sign.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OnlineWallet_sign.restype = None
_UniFFILib.bdk_38a5_OnlineWallet_get_transactions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_OnlineWallet_get_transactions.restype = RustBuffer
_UniFFILib.ffi_bdk_38a5_PartiallySignedBitcoinTransaction_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_bdk_38a5_PartiallySignedBitcoinTransaction_object_free.restype = None
_UniFFILib.bdk_38a5_PartiallySignedBitcoinTransaction_new.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_uint64,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_PartiallySignedBitcoinTransaction_new.restype = ctypes.c_void_p
_UniFFILib.bdk_38a5_generate_extended_key.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_generate_extended_key.restype = RustBuffer
_UniFFILib.bdk_38a5_restore_extended_key.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.bdk_38a5_restore_extended_key.restype = RustBuffer
_UniFFILib.ffi_bdk_38a5_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_bdk_38a5_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_bdk_38a5_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_bdk_38a5_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_bdk_38a5_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_bdk_38a5_rustbuffer_free.restype = None
_UniFFILib.ffi_bdk_38a5_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_bdk_38a5_rustbuffer_reserve.restype = RustBuffer

# Public interface members begin here.





class Network(enum.Enum):
    BITCOIN = 1
    TESTNET = 2
    SIGNET = 3
    REGTEST = 4








class DatabaseConfig(object):
    def __init__(self):
        raise RuntimeError("DatabaseConfig cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class MEMORY(object):
        def __init__(self,junk ):

            self.junk = junk


        def __str__(self):
            return "DatabaseConfig.MEMORY(junk={} )".format(self.junk )

        def __eq__(self, other):
            if not other.is_memory():
                return False
            if self.junk != other.junk:
                return False
            return True
    class SLED(object):
        def __init__(self,config ):

            self.config = config


        def __str__(self):
            return "DatabaseConfig.SLED(config={} )".format(self.config )

        def __eq__(self, other):
            if not other.is_sled():
                return False
            if self.config != other.config:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_memory(self):
        return isinstance(self, DatabaseConfig.MEMORY)
    def is_sled(self):
        return isinstance(self, DatabaseConfig.SLED)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
DatabaseConfig.MEMORY = type("DatabaseConfig.MEMORY", (DatabaseConfig.MEMORY, DatabaseConfig,), {})
DatabaseConfig.SLED = type("DatabaseConfig.SLED", (DatabaseConfig.SLED, DatabaseConfig,), {})








class Transaction(object):
    def __init__(self):
        raise RuntimeError("Transaction cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class UNCONFIRMED(object):
        def __init__(self,details ):

            self.details = details


        def __str__(self):
            return "Transaction.UNCONFIRMED(details={} )".format(self.details )

        def __eq__(self, other):
            if not other.is_unconfirmed():
                return False
            if self.details != other.details:
                return False
            return True
    class CONFIRMED(object):
        def __init__(self,details, confirmation ):

            self.details = details
            self.confirmation = confirmation


        def __str__(self):
            return "Transaction.CONFIRMED(details={}, confirmation={} )".format(self.details, self.confirmation )

        def __eq__(self, other):
            if not other.is_confirmed():
                return False
            if self.details != other.details:
                return False
            if self.confirmation != other.confirmation:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_unconfirmed(self):
        return isinstance(self, Transaction.UNCONFIRMED)
    def is_confirmed(self):
        return isinstance(self, Transaction.CONFIRMED)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
Transaction.UNCONFIRMED = type("Transaction.UNCONFIRMED", (Transaction.UNCONFIRMED, Transaction,), {})
Transaction.CONFIRMED = type("Transaction.CONFIRMED", (Transaction.CONFIRMED, Transaction,), {})








class BlockchainConfig(object):
    def __init__(self):
        raise RuntimeError("BlockchainConfig cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class ELECTRUM(object):
        def __init__(self,config ):

            self.config = config


        def __str__(self):
            return "BlockchainConfig.ELECTRUM(config={} )".format(self.config )

        def __eq__(self, other):
            if not other.is_electrum():
                return False
            if self.config != other.config:
                return False
            return True
    class ESPLORA(object):
        def __init__(self,config ):

            self.config = config


        def __str__(self):
            return "BlockchainConfig.ESPLORA(config={} )".format(self.config )

        def __eq__(self, other):
            if not other.is_esplora():
                return False
            if self.config != other.config:
                return False
            return True


    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_electrum(self):
        return isinstance(self, BlockchainConfig.ELECTRUM)
    def is_esplora(self):
        return isinstance(self, BlockchainConfig.ESPLORA)


# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
BlockchainConfig.ELECTRUM = type("BlockchainConfig.ELECTRUM", (BlockchainConfig.ELECTRUM, BlockchainConfig,), {})
BlockchainConfig.ESPLORA = type("BlockchainConfig.ESPLORA", (BlockchainConfig.ESPLORA, BlockchainConfig,), {})






class MnemonicType(enum.Enum):
    WORDS12 = 1
    WORDS15 = 2
    WORDS18 = 3
    WORDS21 = 4
    WORDS24 = 5



class SledDbConfiguration(object):
    def __init__(self,path, tree_name ):
        self.path = path
        self.tree_name = tree_name

    def __str__(self):
        return "SledDbConfiguration(path={}, tree_name={} )".format(self.path, self.tree_name )

    def __eq__(self, other):
        if self.path != other.path:
            return False
        if self.tree_name != other.tree_name:
            return False
        return True

class TransactionDetails(object):
    def __init__(self,fees, received, sent, txid ):
        self.fees = fees
        self.received = received
        self.sent = sent
        self.txid = txid

    def __str__(self):
        return "TransactionDetails(fees={}, received={}, sent={}, txid={} )".format(self.fees, self.received, self.sent, self.txid )

    def __eq__(self, other):
        if self.fees != other.fees:
            return False
        if self.received != other.received:
            return False
        if self.sent != other.sent:
            return False
        if self.txid != other.txid:
            return False
        return True

class Confirmation(object):
    def __init__(self,height, timestamp ):
        self.height = height
        self.timestamp = timestamp

    def __str__(self):
        return "Confirmation(height={}, timestamp={} )".format(self.height, self.timestamp )

    def __eq__(self, other):
        if self.height != other.height:
            return False
        if self.timestamp != other.timestamp:
            return False
        return True

class ElectrumConfig(object):
    def __init__(self,url, socks5, retry, timeout, stop_gap ):
        self.url = url
        self.socks5 = socks5
        self.retry = retry
        self.timeout = timeout
        self.stop_gap = stop_gap

    def __str__(self):
        return "ElectrumConfig(url={}, socks5={}, retry={}, timeout={}, stop_gap={} )".format(self.url, self.socks5, self.retry, self.timeout, self.stop_gap )

    def __eq__(self, other):
        if self.url != other.url:
            return False
        if self.socks5 != other.socks5:
            return False
        if self.retry != other.retry:
            return False
        if self.timeout != other.timeout:
            return False
        if self.stop_gap != other.stop_gap:
            return False
        return True

class EsploraConfig(object):
    def __init__(self,base_url, proxy, timeout_read, timeout_write, stop_gap ):
        self.base_url = base_url
        self.proxy = proxy
        self.timeout_read = timeout_read
        self.timeout_write = timeout_write
        self.stop_gap = stop_gap

    def __str__(self):
        return "EsploraConfig(base_url={}, proxy={}, timeout_read={}, timeout_write={}, stop_gap={} )".format(self.base_url, self.proxy, self.timeout_read, self.timeout_write, self.stop_gap )

    def __eq__(self, other):
        if self.base_url != other.base_url:
            return False
        if self.proxy != other.proxy:
            return False
        if self.timeout_read != other.timeout_read:
            return False
        if self.timeout_write != other.timeout_write:
            return False
        if self.stop_gap != other.stop_gap:
            return False
        return True

class ExtendedKeyInfo(object):
    def __init__(self,mnemonic, xprv, fingerprint ):
        self.mnemonic = mnemonic
        self.xprv = xprv
        self.fingerprint = fingerprint

    def __str__(self):
        return "ExtendedKeyInfo(mnemonic={}, xprv={}, fingerprint={} )".format(self.mnemonic, self.xprv, self.fingerprint )

    def __eq__(self, other):
        if self.mnemonic != other.mnemonic:
            return False
        if self.xprv != other.xprv:
            return False
        if self.fingerprint != other.fingerprint:
            return False
        return True





def generate_extended_key(network,mnemonic_type,password):
    network = network
    mnemonic_type = mnemonic_type
    password = (None if password is None else password)
    _retval = rust_call_with_error(BdkError,_UniFFILib.bdk_38a5_generate_extended_key,RustBuffer.allocFromTypeNetwork(network),RustBuffer.allocFromTypeMnemonicType(mnemonic_type),RustBuffer.allocFromOptionalstring(password))
    return _retval.consumeIntoTypeExtendedKeyInfo()




def restore_extended_key(network,mnemonic,password):
    network = network
    mnemonic = mnemonic
    password = (None if password is None else password)
    _retval = rust_call_with_error(BdkError,_UniFFILib.bdk_38a5_restore_extended_key,RustBuffer.allocFromTypeNetwork(network),RustBuffer.allocFromString(mnemonic),RustBuffer.allocFromOptionalstring(password))
    return _retval.consumeIntoTypeExtendedKeyInfo()




class OfflineWallet(object):
    def __init__(self, descriptor,network,database_config):
        descriptor = descriptor
        network = network
        database_config = database_config
        self._pointer = rust_call_with_error(BdkError,_UniFFILib.bdk_38a5_OfflineWallet_new,RustBuffer.allocFromString(descriptor),RustBuffer.allocFromTypeNetwork(network),RustBuffer.allocFromTypeDatabaseConfig(database_config))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_bdk_38a5_OfflineWallet_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst



    def get_new_address(self, ):
        _retval = rust_call(_UniFFILib.bdk_38a5_OfflineWallet_get_new_address,self._pointer,)
        return _retval.consumeIntoString()

    def get_last_unused_address(self, ):
        _retval = rust_call(_UniFFILib.bdk_38a5_OfflineWallet_get_last_unused_address,self._pointer,)
        return _retval.consumeIntoString()

    def get_balance(self, ):
        _retval = rust_call_with_error(
    BdkError,_UniFFILib.bdk_38a5_OfflineWallet_get_balance,self._pointer,)
        return int(_retval)

    def sign(self, psbt):
        psbt = psbt
        rust_call_with_error(
    BdkError,_UniFFILib.bdk_38a5_OfflineWallet_sign,self._pointer,(psbt._pointer))

    def get_transactions(self, ):
        _retval = rust_call_with_error(
    BdkError,_UniFFILib.bdk_38a5_OfflineWallet_get_transactions,self._pointer,)
        return _retval.consumeIntoSequenceTypeTransaction()



class OnlineWallet(object):
    def __init__(self, descriptor,change_descriptor,network,database_config,blockchain_config):
        descriptor = descriptor
        change_descriptor = (None if change_descriptor is None else change_descriptor)
        network = network
        database_config = database_config
        blockchain_config = blockchain_config
        self._pointer = rust_call_with_error(BdkError,_UniFFILib.bdk_38a5_OnlineWallet_new,RustBuffer.allocFromString(descriptor),RustBuffer.allocFromOptionalstring(change_descriptor),RustBuffer.allocFromTypeNetwork(network),RustBuffer.allocFromTypeDatabaseConfig(database_config),RustBuffer.allocFromTypeBlockchainConfig(blockchain_config))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_bdk_38a5_OnlineWallet_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst



    def get_new_address(self, ):
        _retval = rust_call(_UniFFILib.bdk_38a5_OnlineWallet_get_new_address,self._pointer,)
        return _retval.consumeIntoString()

    def get_last_unused_address(self, ):
        _retval = rust_call(_UniFFILib.bdk_38a5_OnlineWallet_get_last_unused_address,self._pointer,)
        return _retval.consumeIntoString()

    def get_balance(self, ):
        _retval = rust_call_with_error(
    BdkError,_UniFFILib.bdk_38a5_OnlineWallet_get_balance,self._pointer,)
        return int(_retval)

    def sign(self, psbt):
        psbt = psbt
        rust_call_with_error(
    BdkError,_UniFFILib.bdk_38a5_OnlineWallet_sign,self._pointer,(psbt._pointer))

    def get_transactions(self, ):
        _retval = rust_call_with_error(
    BdkError,_UniFFILib.bdk_38a5_OnlineWallet_get_transactions,self._pointer,)
        return _retval.consumeIntoSequenceTypeTransaction()



class PartiallySignedBitcoinTransaction(object):
    def __init__(self, wallet,recipient,amount,fee_rate):
        wallet = wallet
        recipient = recipient
        amount = int(amount)
        fee_rate = (None if fee_rate is None else float(fee_rate))
        self._pointer = rust_call_with_error(BdkError,_UniFFILib.bdk_38a5_PartiallySignedBitcoinTransaction_new,(wallet._pointer),RustBuffer.allocFromString(recipient),amount,RustBuffer.allocFromOptionalf32(fee_rate))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_bdk_38a5_PartiallySignedBitcoinTransaction_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst






__all__ = [
    "InternalError",
    "Network",
    "DatabaseConfig",
    "Transaction",
    "BlockchainConfig",
    "MnemonicType",
    "SledDbConfiguration",
    "TransactionDetails",
    "Confirmation",
    "ElectrumConfig",
    "EsploraConfig",
    "ExtendedKeyInfo",
    "generate_extended_key",
    "restore_extended_key",
    "OfflineWallet",
    "OnlineWallet",
    "PartiallySignedBitcoinTransaction",
    "BdkError",
]

