namespace bdk {};

// ------------------------------------------------------------------------
// bdk crate - error module
// ------------------------------------------------------------------------

[Error]
interface AddressParseError {
  Base58();
  Bech32();
  WitnessVersion(string error_message);
  WitnessProgram(string error_message);
  UnknownHrp();
  LegacyAddressTooLong();
  InvalidBase58PayloadLength();
  InvalidLegacyPrefix();
  NetworkValidation();
  OtherAddressParseErr();
};

[Error]
interface Bip32Error {
    CannotDeriveFromHardenedKey();
    Secp256k1(string error_message);
    InvalidChildNumber(u32 child_number);
    InvalidChildNumberFormat();
    InvalidDerivationPathFormat();
    UnknownVersion(string version);
    WrongExtendedKeyLength(u32 length);
    Base58(string error_message);
    Hex(string error_message);
    InvalidPublicKeyHexLength(u32 length);
    UnknownError(string error_message);
};

[Error]
interface Bip39Error {
  BadWordCount(u64 word_count);
  UnknownWord(u64 index);
  BadEntropyBitCount(u64 bit_count);
  InvalidChecksum();
  AmbiguousLanguages(string languages);
};

[Error]
interface CalculateFeeError {
  MissingTxOut(sequence<OutPoint> out_points);
  NegativeFee(string amount);
};

[Error]
interface CannotConnectError {
  Include(u32 height);
};

[Error]
interface CreateTxError {
  Descriptor(string error_message);
  Policy(string error_message);
  SpendingPolicyRequired(string kind);
  Version0();
  Version1Csv();
  LockTime(string requested, string required);
  RbfSequenceCsv(string sequence, string csv);
  FeeTooLow(string required);
  FeeRateTooLow(string required);
  NoUtxosSelected();
  OutputBelowDustLimit(u64 index);
  ChangePolicyDescriptor();
  CoinSelection(string error_message);
  InsufficientFunds(u64 needed, u64 available);
  NoRecipients();
  Psbt(string error_message);
  MissingKeyOrigin(string key);
  UnknownUtxo(string outpoint);
  MissingNonWitnessUtxo(string outpoint);
  MiniscriptPsbt(string error_message);
  PushBytesError();
  LockTimeConversionError();
};

[Error]
interface CreateWithPersistError {
  Persist(string error_message);
  DataAlreadyExists();
  Descriptor(string error_message);
};

[Error]
interface DescriptorError {
    InvalidHdKeyPath();
    InvalidDescriptorChecksum();
    HardenedDerivationXpub();
    MultiPath();
    Key(string error_message);
    Policy(string error_message);
    InvalidDescriptorCharacter(string char);
    Bip32(string error_message);
    Base58(string error_message);
    Pk(string error_message);
    Miniscript(string error_message);
    Hex(string error_message);
    ExternalAndInternalAreTheSame();
};

[Error]
interface DescriptorKeyError {
  Parse(string error_message);
  InvalidKeyType();
  Bip32(string error_message);
};

[Error]
interface ElectrumError {
  IOError(string error_message);
  Json(string error_message);
  Hex(string error_message);
  Protocol(string error_message);
  Bitcoin(string error_message);
  AlreadySubscribed();
  NotSubscribed();
  InvalidResponse(string error_message);
  Message(string error_message);
  InvalidDNSNameError(string domain);
  MissingDomain();
  AllAttemptsErrored();
  SharedIOError(string error_message);
  CouldntLockReader();
  Mpsc();
  CouldNotCreateConnection(string error_message);
  RequestAlreadyConsumed();
};

[Error]
interface EsploraError {
  Minreq(string error_message);
  HttpResponse(u16 status, string error_message);
  Parsing(string error_message);
  StatusCode(string error_message);
  BitcoinEncoding(string error_message);
  HexToArray(string error_message);
  HexToBytes(string error_message);
  TransactionNotFound();
  HeaderHeightNotFound(u32 height);
  HeaderHashNotFound();
  InvalidHttpHeaderName(string name);
  InvalidHttpHeaderValue(string value);
  RequestAlreadyConsumed();
  InvalidResponse();
};

[Error]
interface ExtractTxError {
  AbsurdFeeRate(u64 fee_rate);
  MissingInputValue();
  SendingTooMuch();
  OtherExtractTxErr();
};

[Error]
interface FeeRateError {
  ArithmeticOverflow();
};

[Error]
interface FromScriptError {
  UnrecognizedScript();
  WitnessProgram(string error_message);
  WitnessVersion(string error_message);
  OtherFromScriptErr();
};

[Error]
interface LoadWithPersistError {
    Persist(string error_message);
    InvalidChangeSet(string error_message);
    CouldNotLoad();
};

[Error]
interface MiniscriptError {
    AbsoluteLockTime();
    AddrError(string error_message);
    AddrP2shError(string error_message);
    AnalysisError(string error_message);
    AtOutsideOr();
    BadDescriptor(string error_message);
    BareDescriptorAddr();
    CmsTooManyKeys(u32 keys);
    ContextError(string error_message);
    CouldNotSatisfy();
    ExpectedChar(string char);
    ImpossibleSatisfaction();
    InvalidOpcode();
    InvalidPush();
    LiftError(string error_message);
    MaxRecursiveDepthExceeded();
    MissingSig();
    MultiATooManyKeys(u64 keys);
    MultiColon();
    MultipathDescLenMismatch();
    NonMinimalVerify(string error_message);
    NonStandardBareScript();
    NonTopLevel(string error_message);
    ParseThreshold();
    PolicyError(string error_message);
    PubKeyCtxError();
    RelativeLockTime();
    Script(string error_message);
    Secp(string error_message);
    Threshold();
    TrNoScriptCode();
    Trailing(string error_message);
    TypeCheck(string error_message);
    Unexpected(string error_message);
    UnexpectedStart();
    UnknownWrapper(string char);
    Unprintable(u8 byte);
};

[Error]
interface ParseAmountError {
  OutOfRange();
  TooPrecise();
  MissingDigits();
  InputTooLarge();
  InvalidCharacter(string error_message);
  OtherParseAmountErr();
};

[Error]
interface PersistenceError {
  Write(string error_message);
};

[Error]
interface PsbtError {
  InvalidMagic();
  MissingUtxo();
  InvalidSeparator();
  PsbtUtxoOutOfBounds();
  InvalidKey(string key);
  InvalidProprietaryKey();
  DuplicateKey(string key);
  UnsignedTxHasScriptSigs();
  UnsignedTxHasScriptWitnesses();
  MustHaveUnsignedTx();
  NoMorePairs();
  UnexpectedUnsignedTx();
  NonStandardSighashType(u32 sighash);
  InvalidHash(string hash);
  InvalidPreimageHashPair();
  CombineInconsistentKeySources(string xpub);
  ConsensusEncoding(string encoding_error);
  NegativeFee();
  FeeOverflow();
  InvalidPublicKey(string error_message);
  InvalidSecp256k1PublicKey(string secp256k1_error);
  InvalidXOnlyPublicKey();
  InvalidEcdsaSignature(string error_message);
  InvalidTaprootSignature(string error_message);
  InvalidControlBlock();
  InvalidLeafVersion();
  Taproot();
  TapTree(string error_message);
  XPubKey();
  Version(string error_message);
  PartialDataConsumption();
  Io(string error_message);
  OtherPsbtErr();
};

[Error]
interface PsbtParseError {
  PsbtEncoding(string error_message);
  Base64Encoding(string error_message);
};

[Error]
interface PsbtFinalizeError {
  InputError(string reason, u32 index);
  WrongInputCount(u32 in_tx, u32 in_map);
  InputIdxOutofBounds(u32 psbt_inp, u32 requested);
};

[Error]
interface RequestBuilderError {
  RequestAlreadyConsumed();
};

[Error]
interface SignerError {
    MissingKey();
    InvalidKey();
    UserCanceled();
    InputIndexOutOfRange();
    MissingNonWitnessUtxo();
    InvalidNonWitnessUtxo();
    MissingWitnessUtxo();
    MissingWitnessScript();
    MissingHdKeypath();
    NonStandardSighash();
    InvalidSighash();
    SighashP2wpkh(string error_message);
    SighashTaproot(string error_message);
    TxInputsIndexError(string error_message);
    MiniscriptPsbt(string error_message);
    External(string error_message);
    Psbt(string error_message);
};

[Error]
interface SqliteError {
  Sqlite(string rusqlite_error);
};

[Error]
interface TransactionError {
  Io();
  OversizedVectorAllocation();
  InvalidChecksum(string expected, string actual);
  NonMinimalVarInt();
  ParseFailed();
  UnsupportedSegwitFlag(u8 flag);
  OtherTransactionErr();
};

[Error]
interface TxidParseError {
  InvalidTxid(string txid);
};

// ------------------------------------------------------------------------
// bdk_wallet crate - types module
// ------------------------------------------------------------------------

/// Types of keychains
[Remote]
enum KeychainKind {
  /// External keychain, used for deriving recipient addresses.
  "External",

  /// Internal keychain, used for deriving change addresses.
  "Internal",
};

/// A derived address and the index it was found at.
dictionary AddressInfo {
  /// Child index of this address
  u32 index;

  /// Address
  Address address;

  /// Type of keychain
  KeychainKind keychain;
};

/// Balance, differentiated into various categories.
dictionary Balance {
  /// All coinbase outputs not yet matured
  Amount immature;

  /// Unconfirmed UTXOs generated by a wallet tx
  Amount trusted_pending;

  /// Unconfirmed UTXOs received from an external wallet
  Amount untrusted_pending;

  /// Confirmed and immediately spendable balance
  Amount confirmed;

  /// Get sum of trusted_pending and confirmed coins.
  ///
  /// This is the balance you can spend right now that shouldn't get cancelled via another party
  /// double spending it.
  Amount trusted_spendable;

  /// Get the whole balance visible to the wallet.
  Amount total;
};

/// An unspent output owned by a [`Wallet`].
dictionary LocalOutput {
  /// Reference to a transaction output
  OutPoint outpoint;

  /// Transaction output
  TxOut txout;

  /// Type of keychain
  KeychainKind keychain;

  /// Whether this UTXO is spent or not
  boolean is_spent;

  /// The derivation index for the script pubkey in the wallet
  u32 derivation_index;

  /// The position of the output in the blockchain.
  ChainPosition chain_position;
};

/// Bitcoin transaction output.
///
/// Defines new coins to be created as a result of the transaction,
/// along with spending conditions ("script", aka "output script"),
/// which an input spending it must satisfy.
///
/// An output that is not yet spent by an input is called Unspent Transaction Output ("UTXO").
dictionary TxOut {
  /// The value of the output, in satoshis.
  u64 value;

  /// The script which must be satisfied for the output to be spent.
  Script script_pubkey;
};

/// Represents the observed position of some chain data.
[Enum]
interface ChainPosition {
  /// The chain data is confirmed as it is anchored in the best chain by `A`.
  Confirmed(ConfirmationBlockTime confirmation_block_time, string? transitively);

  /// The chain data is not confirmed and last seen in the mempool at this timestamp.
  Unconfirmed(u64? timestamp);
};

dictionary ConfirmationBlockTime {
  BlockId block_id;
  u64 confirmation_time;
};

dictionary BlockId {
  u32 height;
  string hash;
};

dictionary CanonicalTx {
  Transaction transaction;
  ChainPosition chain_position;
};

/// Builds a [`FullScanRequest`].
interface FullScanRequestBuilder {
  [Throws=RequestBuilderError]
  FullScanRequestBuilder inspect_spks_for_all_keychains(FullScanScriptInspector inspector);

  [Throws=RequestBuilderError]
  FullScanRequest build();
};

/// Builds a [`SyncRequest`].
interface SyncRequestBuilder {
  [Throws=RequestBuilderError]
  SyncRequestBuilder inspect_spks(SyncScriptInspector inspector);

  [Throws=RequestBuilderError]
  SyncRequest build();
};

interface FullScanRequest {};

interface SyncRequest {};

[Trait, WithForeign]
interface SyncScriptInspector {
  void inspect(Script script, u64 total);
};

[Trait, WithForeign]
interface FullScanScriptInspector {
  void inspect(KeychainKind keychain, u32 index, Script script);
};

/// A changeset for [`Wallet`].
[Remote]
interface ChangeSet {};

/// Options for a software signer.
///
/// Adjust the behavior of our software signers and the way a transaction is finalized.
dictionary SignOptions {
    /// Whether the signer should trust the `witness_utxo`, if the `non_witness_utxo` hasn't been
    /// provided
    ///
    /// Defaults to `false` to mitigate the "SegWit bug" which could trick the wallet into
    /// paying a fee larger than expected.
    ///
    /// Some wallets, especially if relatively old, might not provide the `non_witness_utxo` for
    /// SegWit transactions in the PSBT they generate: in those cases setting this to `true`
    /// should correctly produce a signature, at the expense of an increased trust in the creator
    /// of the PSBT.
    ///
    /// For more details see: <https://blog.trezor.io/details-of-firmware-updates-for-trezor-one-version-1-9-1-and-trezor-model-t-version-2-3-1-1eba8f60f2dd>
    boolean trust_witness_utxo;

    /// Whether the wallet should assume a specific height has been reached when trying to finalize
    /// a transaction
    ///
    /// The wallet will only "use" a timelock to satisfy the spending policy of an input if the
    /// timelock height has already been reached. This option allows overriding the "current height" to let the
    /// wallet use timelocks in the future to spend a coin.
    u32? assume_height;

    /// Whether the signer should use the `sighash_type` set in the PSBT when signing, no matter
    /// what its value is
    ///
    /// Defaults to `false` which will only allow signing using `SIGHASH_ALL`.
    boolean allow_all_sighashes;

    /// Whether to try finalizing the PSBT after the inputs are signed.
    ///
    /// Defaults to `true` which will try finalizing PSBT after inputs are signed.
    boolean try_finalize;

    /// Whether we should try to sign a taproot transaction with the taproot internal key
    /// or not. This option is ignored if we're signing a non-taproot PSBT.
    ///
    /// Defaults to `true`, i.e., we always try to sign with the taproot internal key.
    boolean sign_with_tap_internal_key;

    /// Whether we should grind ECDSA signature to ensure signing with low r
    /// or not.
    /// Defaults to `true`, i.e., we always grind ECDSA signature to sign with low r.
    boolean allow_grinding;
};

// ------------------------------------------------------------------------
// bdk_wallet crate - wallet module
// ------------------------------------------------------------------------

/// Policy regarding the use of change outputs when creating a transaction
[Remote]
enum ChangeSpendPolicy {
  /// Use both change and non-change outputs (default)
  "ChangeAllowed",
  /// Only use change outputs (see [`TxBuilder::only_spend_change`])
  "OnlyChange",
  /// Only use non-change outputs
  "ChangeForbidden"
};

interface Wallet {
  [Throws=CreateWithPersistError]
  constructor(Descriptor descriptor, Descriptor change_descriptor, Network network, Connection connection);

  [Name=load, Throws=LoadWithPersistError]
  constructor(Descriptor descriptor, Descriptor change_descriptor, Connection connection);

  /// Informs the wallet that you no longer intend to broadcast a tx that was built from it.
  ///
  /// This frees up the change address used when creating the tx for use in future transactions.
  void cancel_tx([ByRef] Transaction tx);

  /// The derivation index of this wallet. It will return `None` if it has not derived any addresses.
  /// Otherwise, it will return the index of the highest address it has derived.
  u32? derivation_index(KeychainKind keychain);

  /// Returns the utxo owned by this wallet corresponding to `outpoint` if it exists in the
  /// wallet's database.
  LocalOutput? get_utxo(OutPoint op);

  /// Finds how the wallet derived the script pubkey `spk`.
  ///
  /// Will only return `Some(_)` if the wallet has given out the spk.
  KeychainAndIndex? derivation_of_spk(Script spk);

  /// Attempt to reveal the next address of the given `keychain`.
  ///
  /// This will increment the keychain's derivation index. If the keychain's descriptor doesn't
  /// contain a wildcard or every address is already revealed up to the maximum derivation
  /// index defined in [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki),
  /// then the last revealed address will be returned.
  AddressInfo reveal_next_address(KeychainKind keychain);

  /// Peek an address of the given `keychain` at `index` without revealing it.
  ///
  /// For non-wildcard descriptors this returns the same address at every provided index.
  ///
  /// # Panics
  ///
  /// This panics when the caller requests for an address of derivation index greater than the
  /// [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) max index.
  AddressInfo peek_address(KeychainKind keychain, u32 index);

  /// The index of the next address that you would get if you were to ask the wallet for a new address
  u32 next_derivation_index(KeychainKind keychain);

  /// Get the next unused address for the given `keychain`, i.e. the address with the lowest
  /// derivation index that hasn't been used in a transaction.
  ///
  /// This will attempt to reveal a new address if all previously revealed addresses have
  /// been used, in which case the returned address will be the same as calling [`Wallet::reveal_next_address`].
  ///
  /// **WARNING**: To avoid address reuse you must persist the changes resulting from one or more
  /// calls to this method before closing the wallet. See [`Wallet::reveal_next_address`].
  AddressInfo next_unused_address(KeychainKind keychain);

  /// Marks an address used of the given `keychain` at `index`.
  ///
  /// Returns whether the given index was present and then removed from the unused set.
  boolean mark_used(KeychainKind keychain, u32 index);

  /// Reveal addresses up to and including the target `index` and return an iterator
  /// of newly revealed addresses.
  ///
  /// If the target `index` is unreachable, we make a best effort to reveal up to the last
  /// possible index. If all addresses up to the given `index` are already revealed, then
  /// no new addresses are returned.
  ///
  /// **WARNING**: To avoid address reuse you must persist the changes resulting from one or more
  /// calls to this method before closing the wallet. See [`Wallet::reveal_next_address`].
  sequence<AddressInfo> reveal_addresses_to(KeychainKind keychain, u32 index);

  /// List addresses that are revealed but unused.
  ///
  /// Note if the returned iterator is empty you can reveal more addresses
  /// by using [`reveal_next_address`](Self::reveal_next_address) or
  /// [`reveal_addresses_to`](Self::reveal_addresses_to).
  sequence<AddressInfo> list_unused_addresses(KeychainKind keychain);

  /// Get the Bitcoin network the wallet is using.
  Network network();

  /// Return the checksum of the public descriptor associated to `keychain`
  ///
  /// Internally calls [`Self::public_descriptor`] to fetch the right descriptor
  string descriptor_checksum(KeychainKind keychain);

  [Throws=DescriptorError]
  Policy? policies(KeychainKind keychain);

  /// Return the balance, separated into available, trusted-pending, untrusted-pending and immature
  /// values.
  Balance balance();

  /// Applies an update to the wallet and stages the changes (but does not persist them).
  ///
  /// Usually you create an `update` by interacting with some blockchain data source and inserting
  /// transactions related to your wallet into it.
  ///
  /// After applying updates you should persist the staged wallet changes. For an example of how
  /// to persist staged wallet changes see [`Wallet::reveal_next_address`].
  [Throws=CannotConnectError]
  void apply_update(Update update);

  /// Return whether or not a `script` is part of this wallet (either internal or external)
  boolean is_mine(Script script);

  /// Sign a transaction with all the wallet's signers, in the order specified by every signer's
  /// [`SignerOrdering`]. This function returns the `Result` type with an encapsulated `bool` that has the value true if the PSBT was finalized, or false otherwise.
  ///
  /// The [`SignOptions`] can be used to tweak the behavior of the software signers, and the way
  /// the transaction is finalized at the end. Note that it can't be guaranteed that *every*
  /// signers will follow the options, but the "software signers" (WIF keys and `xprv`) defined
  /// in this library will.
  [Throws=SignerError]
  boolean sign(Psbt psbt, optional SignOptions? sign_options = null);

  /// Finalize a PSBT, i.e., for each input determine if sufficient data is available to pass
  /// validation and construct the respective `scriptSig` or `scriptWitness`. Please refer to
  /// [BIP174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki#Input_Finalizer),
  /// and [BIP371](https://github.com/bitcoin/bips/blob/master/bip-0371.mediawiki)
  /// for further information.
  ///
  /// Returns `true` if the PSBT could be finalized, and `false` otherwise.
  ///
  /// The [`SignOptions`] can be used to tweak the behavior of the finalizer.
  [Throws=SignerError]
  boolean finalize_psbt(Psbt psbt, optional SignOptions? sign_options = null);

  /// Compute the `tx`'s sent and received [`Amount`]s.
  ///
  /// This method returns a tuple `(sent, received)`. Sent is the sum of the txin amounts
  /// that spend from previous txouts tracked by this wallet. Received is the summation
  /// of this tx's outputs that send to script pubkeys tracked by this wallet.
  SentAndReceivedValues sent_and_received([ByRef] Transaction tx);

  /// Iterate over the transactions in the wallet.
  sequence<CanonicalTx> transactions();

  /// Get a single transaction from the wallet as a [`WalletTx`] (if the transaction exists).
  ///
  /// `WalletTx` contains the full transaction alongside meta-data such as:
  /// * Blocks that the transaction is [`Anchor`]ed in. These may or may not be blocks that exist
  ///   in the best chain.
  /// * The [`ChainPosition`] of the transaction in the best chain - whether the transaction is
  ///   confirmed or unconfirmed. If the transaction is confirmed, the anchor which proves the
  ///   confirmation is provided. If the transaction is unconfirmed, the unix timestamp of when
  ///   the transaction was last seen in the mempool is provided.
  [Throws=TxidParseError]
  CanonicalTx? get_tx(string txid);

  /// Calculates the fee of a given transaction. Returns [`Amount::ZERO`] if `tx` is a coinbase transaction.
  ///
  /// To calculate the fee for a [`Transaction`] with inputs not owned by this wallet you must
  /// manually insert the TxOut(s) into the tx graph using the [`insert_txout`] function.
  ///
  /// Note `tx` does not have to be in the graph for this to work.
  [Throws=CalculateFeeError]
  Amount calculate_fee([ByRef] Transaction tx);

  /// Calculate the [`FeeRate`] for a given transaction.
  ///
  /// To calculate the fee rate for a [`Transaction`] with inputs not owned by this wallet you must
  /// manually insert the TxOut(s) into the tx graph using the [`insert_txout`] function.
  ///
  /// Note `tx` does not have to be in the graph for this to work.
  [Throws=CalculateFeeError]
  FeeRate calculate_fee_rate([ByRef] Transaction tx);

  /// Return the list of unspent outputs of this wallet
  sequence<LocalOutput> list_unspent();

  /// List all relevant outputs (includes both spent and unspent, confirmed and unconfirmed).
  ///
  /// To list only unspent outputs (UTXOs), use [`Wallet::list_unspent`] instead.
  sequence<LocalOutput> list_output();

  /// Create a [`FullScanRequest] for this wallet.
  ///
  /// This is the first step when performing a spk-based wallet full scan, the returned
  /// [`FullScanRequest] collects iterators for the wallet's keychain script pub keys needed to
  /// start a blockchain full scan with a spk based blockchain client.
  ///
  /// This operation is generally only used when importing or restoring a previously used wallet
  /// in which the list of used scripts is not known.
  FullScanRequestBuilder start_full_scan();

  /// Create a partial [`SyncRequest`] for this wallet for all revealed spks.
  ///
  /// This is the first step when performing a spk-based wallet partial sync, the returned
  /// [`SyncRequest`] collects all revealed script pubkeys from the wallet keychain needed to
  /// start a blockchain sync with a spk based blockchain client.
  SyncRequestBuilder start_sync_with_revealed_spks();

  [Throws=SqliteError]
  boolean persist(Connection connection);
};

interface Update {};

interface Policy {
  string id();
  
  string as_string();

  boolean requires_path();
  
  SatisfiableItem item();
  
  Satisfaction satisfaction();

  Satisfaction contribution();
};

[Enum]
interface SatisfiableItem {
  EcdsaSignature(PkOrF key);
  SchnorrSignature(PkOrF key);
  Sha256Preimage(string hash);
  Hash256Preimage(string hash);
  Ripemd160Preimage(string hash);
  Hash160Preimage(string hash);
  AbsoluteTimelock(LockTime value);
  RelativeTimelock(u32 value);
  Multisig(sequence<PkOrF> keys, u64 threshold);
  Thresh(sequence<Policy> items, u64 threshold);
};

[Enum]
interface PkOrF {
  Pubkey(string value);
  XOnlyPubkey(string value);
  Fingerprint(string value);
};

[Enum]
interface LockTime {
  Blocks(u32 height);
  Seconds(u32 consensus_time);
};

[Enum]
interface Satisfaction {
    Partial(u64 n, u64 m, sequence<u64> items, boolean? sorted, record<u32, sequence<Condition>> conditions);
    PartialComplete(u64 n, u64 m, sequence<u64> items, boolean? sorted, record<sequence<u32>, sequence<Condition>> conditions);
    Complete(Condition condition);
    None(string msg);
};

dictionary Condition {
  u32? csv;
  LockTime? timelock;
};

/// A `TxBuilder` is created by calling `build_tx` on a wallet. After assigning it, you set options on it until finally
/// calling `finish` to consume the builder and generate the transaction.
interface TxBuilder {
  constructor();

  /// Fill-in the `PSBT_GLOBAL_XPUB` field with the extended keys contained in both the external and internal
  /// descriptors.
  ///
  /// This is useful for offline signers that take part to a multisig. Some hardware wallets like BitBox and ColdCard
  /// are known to require this.
  TxBuilder add_global_xpubs();

  /// Add a recipient to the internal list of recipients.
  TxBuilder add_recipient([ByRef] Script script, Amount amount);

  /// Replace the recipients already added with a new list of recipients.
  TxBuilder set_recipients(sequence<ScriptAmount> recipients);

  /// Add a utxo to the internal list of unspendable utxos.
  ///
  /// It’s important to note that the "must-be-spent" utxos added with `TxBuilder::add_utxo` have priority over this.
  TxBuilder add_unspendable(OutPoint unspendable);

  /// Replace the internal list of unspendable utxos with a new list.
  ///
  /// It’s important to note that the "must-be-spent" utxos added with `TxBuilder::add_utxo` have priority over these.
  TxBuilder unspendable(sequence<OutPoint> unspendable);

  /// Add a utxo to the internal list of utxos that must be spent.
  ///
  /// These have priority over the "unspendable" utxos, meaning that if a utxo is present both in the "utxos" and the
  /// "unspendable" list, it will be spent.
  TxBuilder add_utxo(OutPoint outpoint);

  /// The TxBuilder::policy_path is a complex API. See the Rust docs for complete information: https://docs.rs/bdk_wallet/latest/bdk_wallet/struct.TxBuilder.html#method.policy_path
  TxBuilder policy_path(record<string, sequence<u64>> policy_path, KeychainKind keychain);

  /// Set a specific `ChangeSpendPolicy`. See `TxBuilder::do_not_spend_change` and `TxBuilder::only_spend_change` for
  /// some shortcuts. This method assumes the presence of an internal keychain, otherwise it has no effect.
  TxBuilder change_policy(ChangeSpendPolicy change_policy);

  /// Do not spend change outputs.
  ///
  /// This effectively adds all the change outputs to the "unspendable" list. See `TxBuilder::unspendable`. This method
  /// assumes the presence of an internal keychain, otherwise it has no effect.
  TxBuilder do_not_spend_change();

  /// Only spend change outputs.
  ///
  /// This effectively adds all the non-change outputs to the "unspendable" list. See `TxBuilder::unspendable`. This
  /// method assumes the presence of an internal keychain, otherwise it has no effect.
  TxBuilder only_spend_change();

  /// Only spend utxos added by `TxBuilder::add_utxo`.
  ///
  /// The wallet will not add additional utxos to the transaction even if they are needed to make the transaction valid.
  TxBuilder manually_selected_only();

  /// Set a custom fee rate.
  ///
  /// This method sets the mining fee paid by the transaction as a rate on its size. This means that the total fee paid
  /// is equal to fee_rate times the size of the transaction. Default is 1 sat/vB in accordance with Bitcoin Core’s
  /// default relay policy.
  ///
  /// Note that this is really a minimum feerate – it’s possible to overshoot it slightly since adding a change output
  /// to drain the remaining excess might not be viable.
  TxBuilder fee_rate([ByRef] FeeRate fee_rate);

  /// Set an absolute fee The `fee_absolute` method refers to the absolute transaction fee in `Amount`. If anyone sets
  /// both the `fee_absolute` method and the `fee_rate` method, the `FeePolicy` enum will be set by whichever method was
  /// called last, as the `FeeRate` and `FeeAmount` are mutually exclusive.
  ///
  /// Note that this is really a minimum absolute fee – it’s possible to overshoot it slightly since adding a change output to drain the remaining excess might not be viable.
  TxBuilder fee_absolute(Amount fee);

  /// Spend all the available inputs. This respects filters like `TxBuilder::unspendable` and the change policy.
  TxBuilder drain_wallet();

  /// Sets the address to drain excess coins to.
  ///
  /// Usually, when there are excess coins they are sent to a change address generated by the wallet. This option
  /// replaces the usual change address with an arbitrary script_pubkey of your choosing. Just as with a change output,
  /// if the drain output is not needed (the excess coins are too small) it will not be included in the resulting
  /// transaction. The only difference is that it is valid to use `drain_to` without setting any ordinary recipients
  /// with `add_recipient` (but it is perfectly fine to add recipients as well).
  ///
  /// If you choose not to set any recipients, you should provide the utxos that the transaction should spend via
  /// `add_utxos`. `drain_to` is very useful for draining all the coins in a wallet with `drain_wallet` to a single
  /// address.
  TxBuilder drain_to([ByRef] Script script);

  /// Set an exact `nSequence` value.
  ///
  /// This can cause conflicts if the wallet’s descriptors contain an "older" (`OP_CSV`) operator and the given
  /// `nsequence` is lower than the CSV value.
  TxBuilder set_exact_sequence(u32 nsequence);

  /// Add data as an output using `OP_RETURN`.
  TxBuilder add_data(sequence<u8> data);

  /// Set the current blockchain height.
  ///
  /// This will be used to:
  ///
  /// 1. Set the `nLockTime` for preventing fee sniping. Note: This will be ignored if you manually specify a
  /// `nlocktime` using `TxBuilder::nlocktime`.
  ///
  /// 2. Decide whether coinbase outputs are mature or not. If the coinbase outputs are not mature at `current_height`,
  /// we ignore them in the coin selection. If you want to create a transaction that spends immature coinbase inputs,
  /// manually add them using `TxBuilder::add_utxos`.
  /// In both cases, if you don’t provide a current height, we use the last sync height.
  TxBuilder current_height(u32 height);

  /// Use a specific nLockTime while creating the transaction.
  ///
  /// This can cause conflicts if the wallet’s descriptors contain an "after" (`OP_CLTV`) operator.
  TxBuilder nlocktime(LockTime locktime);

  /// Set whether or not the dust limit is checked.
  ///
  /// Note: by avoiding a dust limit check you may end up with a transaction that is non-standard.
  TxBuilder allow_dust(boolean allow_dust);

  /// Build a transaction with a specific version.
  ///
  /// The version should always be greater than 0 and greater than 1 if the wallet’s descriptors contain an "older"
  /// (`OP_CSV`) operator.
  TxBuilder version(i32 version);

  /// Finish building the transaction.
  ///
  /// Uses the thread-local random number generator (rng).
  ///
  /// Returns a new `Psbt` per BIP174.
  ///
  /// WARNING: To avoid change address reuse you must persist the changes resulting from one or more calls to this
  /// method before closing the wallet. See `Wallet::reveal_next_address`.
  [Throws=CreateTxError]
  Psbt finish([ByRef] Wallet wallet);
};

/// A `BumpFeeTxBuilder` is created by calling `build_fee_bump` on a wallet. After assigning it, you set options on it
/// until finally calling `finish` to consume the builder and generate the transaction.
interface BumpFeeTxBuilder {
  constructor(string txid, FeeRate fee_rate);

  /// Set an exact `nSequence` value.
  ///
  /// This can cause conflicts if the wallet’s descriptors contain an "older" (`OP_CSV`) operator and the given
  /// `nsequence` is lower than the CSV value.
  BumpFeeTxBuilder set_exact_sequence(u32 nsequence);

  /// Set the current blockchain height.
  ///
  /// This will be used to:
  ///
  /// 1. Set the `nLockTime` for preventing fee sniping. Note: This will be ignored if you manually specify a
  /// `nlocktime` using `TxBuilder::nlocktime`.
  ///
  /// 2. Decide whether coinbase outputs are mature or not. If the coinbase outputs are not mature at `current_height`,
  /// we ignore them in the coin selection. If you want to create a transaction that spends immature coinbase inputs,
  /// manually add them using `TxBuilder::add_utxos`.
  /// In both cases, if you don’t provide a current height, we use the last sync height.
  BumpFeeTxBuilder current_height(u32 height);

  /// Use a specific nLockTime while creating the transaction.
  ///
  /// This can cause conflicts if the wallet’s descriptors contain an "after" (`OP_CLTV`) operator.
  BumpFeeTxBuilder nlocktime(LockTime locktime);

  /// Set whether or not the dust limit is checked.
  ///
  /// Note: by avoiding a dust limit check you may end up with a transaction that is non-standard.
  BumpFeeTxBuilder allow_dust(boolean allow_dust);

  /// Build a transaction with a specific version.
  ///
  /// The version should always be greater than 0 and greater than 1 if the wallet’s descriptors contain an "older"
  /// (`OP_CSV`) operator.
  BumpFeeTxBuilder version(i32 version);

  /// Finish building the transaction.
  ///
  /// Uses the thread-local random number generator (rng).
  ///
  /// Returns a new `Psbt` per BIP174.
  ///
  /// WARNING: To avoid change address reuse you must persist the changes resulting from one or more calls to this
  /// method before closing the wallet. See `Wallet::reveal_next_address`.
  [Throws=CreateTxError]
  Psbt finish([ByRef] Wallet wallet);
};

// ------------------------------------------------------------------------
// bdk_sqlite crate
// ------------------------------------------------------------------------

interface Connection {
  [Throws=SqliteError]
  constructor(string path);

  [Name=new_in_memory, Throws=SqliteError]
  constructor();
};

// ------------------------------------------------------------------------
// bdk crate - descriptor module
// ------------------------------------------------------------------------

[Traits=(Display)]
interface Mnemonic {
  constructor(WordCount word_count);

  [Name=from_string, Throws=Bip39Error]
  constructor(string mnemonic);

  [Name=from_entropy, Throws=Bip39Error]
  constructor(sequence<u8> entropy);
};

interface DerivationPath {
  [Throws=Bip32Error]
  constructor(string path);
};

interface DescriptorSecretKey {
  constructor(Network network, [ByRef] Mnemonic mnemonic, string? password);

  [Name=from_string, Throws=DescriptorKeyError]
  constructor(string secret_key);

  [Throws=DescriptorKeyError]
  DescriptorSecretKey derive([ByRef] DerivationPath path);

  [Throws=DescriptorKeyError]
  DescriptorSecretKey extend([ByRef] DerivationPath path);

  DescriptorPublicKey as_public();

  sequence<u8> secret_bytes();

  string as_string();
};

interface DescriptorPublicKey {
  [Name=from_string, Throws=DescriptorKeyError]
  constructor(string public_key);

  [Throws=DescriptorKeyError]
  DescriptorPublicKey derive([ByRef] DerivationPath path);

  [Throws=DescriptorKeyError]
  DescriptorPublicKey extend([ByRef] DerivationPath path);

  string as_string();

  /// Whether or not this key has multiple derivation paths.
  boolean is_multipath();

  /// The fingerprint of the master key associated with this key, `0x00000000` if none.
  string master_fingerprint();
};

[Traits=(Display)]
interface Descriptor {
  [Throws=DescriptorError]
  constructor(string descriptor, Network network);

  [Name=new_bip44]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip44_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip49]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip49_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip84]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip84_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip86]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip86_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  string to_string_with_secret();

  /// Whether or not this key has multiple derivation paths.
  boolean is_multipath();

  /// Get as many descriptors as different paths in this descriptor.
  ///
  /// For multipath descriptors it will return as many descriptors as there is
  /// "parallel" paths. For regular descriptors it will just return itself.
  [Throws=MiniscriptError]
  sequence<Descriptor> to_single_descriptors();
};

// ------------------------------------------------------------------------
// bdk_esplora crate
// ------------------------------------------------------------------------

/// Wrapper around an esplora_client::BlockingClient which includes an internal in-memory transaction
/// cache to avoid re-fetching already downloaded transactions.
interface EsploraClient {
  /// Creates a new bdk client from a esplora_client::BlockingClient
  constructor(string url);

  /// Scan keychain scripts for transactions against Esplora, returning an update that can be
  /// applied to the receiving structures.
  ///
  /// `request` provides the data required to perform a script-pubkey-based full scan
  /// (see [`FullScanRequest`]). The full scan for each keychain (`K`) stops after a gap of
  /// `stop_gap` script pubkeys with no associated transactions. `parallel_requests` specifies
  /// the maximum number of HTTP requests to make in parallel.
  [Throws=EsploraError]
  Update full_scan(FullScanRequest request, u64 stop_gap, u64 parallel_requests);

  /// Sync a set of scripts, txids, and/or outpoints against Esplora.
  ///
  /// `request` provides the data required to perform a script-pubkey-based sync (see
  /// [`SyncRequest`]). `parallel_requests` specifies the maximum number of HTTP requests to make
  /// in parallel.
  [Throws=EsploraError]
  Update sync(SyncRequest request, u64 parallel_requests);

  /// Broadcast a [`Transaction`] to Esplora.
  [Throws=EsploraError]
  void broadcast([ByRef] Transaction transaction);

  /// Get a [`Transaction`] option given its [`Txid`].
  [Throws=EsploraError]
  Transaction? get_tx(string txid);

  /// Get the height of the current blockchain tip.
  [Throws=EsploraError]
  u32 get_height();

  /// Get a map where the key is the confirmation target (in number of
  /// blocks) and the value is the estimated feerate (in sat/vB).
  [Throws=EsploraError]
  record<u16, f64> get_fee_estimates();

  /// Get the [`BlockHash`] of a specific block height
  [Throws=EsploraError]
  string get_block_hash(u32 block_height);

  /// Get the status of a [`Transaction`] given its [`Txid`].
  [Throws=EsploraError]
  TxStatus get_tx_status(string txid);

  /// Get transaction info given it's [`Txid`].
  [Throws=EsploraError]
  Tx? get_tx_info(string txid);
};

// ------------------------------------------------------------------------
// bdk_electrum crate
// ------------------------------------------------------------------------

/// Wrapper around an electrum_client::ElectrumApi which includes an internal in-memory transaction
/// cache to avoid re-fetching already downloaded transactions.
interface ElectrumClient {
  /// Creates a new bdk client from a electrum_client::ElectrumApi
  [Throws=ElectrumError]
  constructor(string url);

  /// Full scan the keychain scripts specified with the blockchain (via an Electrum client) and
  /// returns updates for bdk_chain data structures.
  ///
  /// - `request`: struct with data required to perform a spk-based blockchain client
  ///   full scan, see `FullScanRequest`.
  /// - `stop_gap`: the full scan for each keychain stops after a gap of script pubkeys with no
  ///   associated transactions.
  /// - `batch_size`: specifies the max number of script pubkeys to request for in a single batch
  ///   request.
  /// - `fetch_prev_txouts`: specifies whether we want previous `TxOuts` for fee calculation. Note
  ///   that this requires additional calls to the Electrum server, but is necessary for
  ///   calculating the fee on a transaction if your wallet does not own the inputs. Methods like
  ///   `Wallet.calculate_fee` and `Wallet.calculate_fee_rate` will return a
  ///   `CalculateFeeError::MissingTxOut` error if those TxOuts are not present in the transaction
  ///   graph.
  [Throws=ElectrumError]
  Update full_scan(FullScanRequest request, u64 stop_gap, u64 batch_size, boolean fetch_prev_txouts);

  /// Sync a set of scripts with the blockchain (via an Electrum client) for the data specified and returns updates for bdk_chain data structures.
  ///
  /// - `request`: struct with data required to perform a spk-based blockchain client
  ///   sync, see `SyncRequest`.
  /// - `batch_size`: specifies the max number of script pubkeys to request for in a single batch
  ///   request.
  /// - `fetch_prev_txouts`: specifies whether we want previous `TxOuts` for fee calculation. Note
  ///   that this requires additional calls to the Electrum server, but is necessary for
  ///   calculating the fee on a transaction if your wallet does not own the inputs. Methods like
  ///   `Wallet.calculate_fee` and `Wallet.calculate_fee_rate` will return a
  ///   `CalculateFeeError::MissingTxOut` error if those TxOuts are not present in the transaction
  ///   graph.
  ///
  /// If the scripts to sync are unknown, such as when restoring or importing a keychain that may
  /// include scripts that have been used, use full_scan with the keychain.
  [Throws=ElectrumError]
  Update sync(SyncRequest request, u64 batch_size, boolean fetch_prev_txouts);

  /// Broadcasts a transaction to the network.
  [Throws=ElectrumError]
  string transaction_broadcast([ByRef] Transaction tx);

  /// Returns the capabilities of the server.
  [Throws=ElectrumError]
  ServerFeaturesRes server_features();

  /// Estimates the fee required in bitcoin per kilobyte to confirm a transaction in `number` blocks.
  [Throws=ElectrumError]
  f64 estimate_fee(u64 number);

  /// Subscribes to notifications for new block headers, by sending a blockchain.headers.subscribe call.
  [Throws=ElectrumError]
  HeaderNotification block_headers_subscribe();

  /// Pings the server.
  [Throws=ElectrumError]
  void ping();
};

/// Response to an ElectrumClient.server_features request.
dictionary ServerFeaturesRes {
  /// Server version reported.
  string server_version;

  /// Hash of the genesis block.
  string genesis_hash;

  /// Minimum supported version of the protocol.
  string protocol_min;

  /// Maximum supported version of the protocol.
  string protocol_max;

  /// Hash function used to create the `ScriptHash`.
  string? hash_function;

  /// Pruned height of the server.
  i64? pruning;
};

/// Notification of a new block header.
dictionary HeaderNotification {
  /// New block height.
  u64 height;

  /// Newly added header.
  Header header;
};

// ------------------------------------------------------------------------
// bdk-ffi-defined types
// ------------------------------------------------------------------------

dictionary ScriptAmount {
  Script script;
  Amount amount;
};

dictionary SentAndReceivedValues {
    Amount sent;
    Amount received;
};

dictionary KeychainAndIndex {
    KeychainKind keychain;
    u32 index;
};

dictionary TxStatus {
    boolean confirmed;
    u32? block_height;
    string? block_hash;
    u64? block_time;
};

dictionary Tx {
    string txid;
    i32 version;
    u32 locktime;
    u64 size;
    u64 weight;
    u64 fee;
    TxStatus status;
};

dictionary WitnessProgram {
    u8 version;
    sequence<u8> program;
};

[Enum]
interface AddressData {
    P2pkh(string pubkey_hash);
    P2sh(string script_hash);
    Segwit(WitnessProgram witness_program);
};

// ------------------------------------------------------------------------
// bdk-kyoto crate
// ------------------------------------------------------------------------

/// The state of the node with respect to connected peers.
[Remote]
enum NodeState {
  /// Behind on block headers according to our peers.
  "Behind",

  /// Downloading compact block filter headers.
  "HeadersSynced",

  /// Scanning compact block filters.
  "FilterHeadersSynced",

  /// Asking for blocks with matches.
  "FiltersSynced",

  /// Found all known transactions to the wallet.
  "TransactionsSynced"
};

// ------------------------------------------------------------------------
// bdk_wallet crate - bitcoin re-exports
// ------------------------------------------------------------------------

[Remote]
enum WordCount {
  "Words12",
  "Words15",
  "Words18",
  "Words21",
  "Words24",
};

[Traits=(Display)]
interface Address {
  [Throws=AddressParseError]
  constructor(string address, Network network);

  [Name=from_script, Throws=FromScriptError]
  constructor(Script script, Network network);

  Script script_pubkey();

  string to_qr_uri();

  boolean is_valid_for_network(Network network);

  AddressData to_address_data();
};

/// Bitcoin block header.
/// Contains all the block’s information except the actual transactions, but including a root of a merkle tree
/// committing to all transactions in the block.
dictionary Header {
  /// Block version, now repurposed for soft fork signalling.
  i32 version;

  /// Reference to the previous block in the chain.
  string prev_blockhash;

  /// The root hash of the merkle tree of transactions in the block.
  string merkle_root;

  /// The timestamp of the block, as claimed by the miner.
  u32 time;

  /// The target value below which the blockhash must lie.
  u32 bits;

  /// The nonce, selected to obtain a low enough blockhash.
  u32 nonce;
};

interface Transaction {
  [Throws=TransactionError]
  constructor(sequence<u8> transaction_bytes);

  string compute_txid();

  u64 total_size();

  u64 vsize();

  boolean is_coinbase();

  boolean is_explicitly_rbf();

  boolean is_lock_time_enabled();

  i32 version();

  sequence<u8> serialize();

  u64 weight();

  sequence<TxIn> input();

  sequence<TxOut> output();

  u32 lock_time();
};

interface Psbt {
  [Throws=PsbtParseError]
  constructor(string psbt_base64);

  string serialize();

  [Throws=ExtractTxError]
  Transaction extract_tx();

  [Throws=PsbtError]
  u64 fee();

  [Throws=PsbtError]
  Psbt combine(Psbt other);

  FinalizedPsbtResult finalize();

  string json_serialize();
};

dictionary FinalizedPsbtResult {
  Psbt psbt;
  boolean could_finalize;
  sequence<PsbtFinalizeError>? errors;
};

dictionary TxIn {
  OutPoint previous_output;
  Script script_sig;
  u32 sequence;
  sequence<sequence<u8>> witness;
};

interface Script {
  constructor(sequence<u8> raw_output_script);

  sequence<u8> to_bytes();
};

[NonExhaustive, Remote]
enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
  "Testnet4",
};

interface Amount {
  [Name=from_sat]
  constructor(u64 from_sat);

  [Name=from_btc, Throws=ParseAmountError]
  constructor(f64 from_btc);

  u64 to_sat();

  f64 to_btc();
};

interface FeeRate {
  [Name=from_sat_per_vb, Throws=FeeRateError]
  constructor(u64 sat_per_vb);

  [Name=from_sat_per_kwu]
  constructor(u64 sat_per_kwu);

  u64 to_sat_per_vb_ceil();

  u64 to_sat_per_vb_floor();

  u64 to_sat_per_kwu();
};

dictionary OutPoint {
  string txid;
  u32 vout;
};
