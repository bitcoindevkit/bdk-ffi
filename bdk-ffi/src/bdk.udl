namespace bdk {};

// ------------------------------------------------------------------------
// bdk crate - error module
// ------------------------------------------------------------------------

[Error]
enum Alpha3Error {
  "Generic"
};

[Error]
interface CalculateFeeError {
  MissingTxOut(sequence<OutPoint> out_points);
  NegativeFee(i64 fee);
};

[Error]
interface WalletCreationError {
  Io(string e);
  InvalidMagicBytes(sequence<u8> got, sequence<u8> expected);
  Descriptor();
  Write();
  Load();
  NotInitialized();
  LoadedGenesisDoesNotMatch();
  LoadedNetworkDoesNotMatch(Network expected, Network? got);
};

[Error]
interface PersistenceError {
  Write(string e);
};

[Error]
interface EsploraError {
  Ureq(string error_message);
  UreqTransport(string error_message);
  Reqwest();
  Http(u16 status_code);
  Io(string error_message);
  NoHeader();
  Parsing(string error_message);
  BitcoinEncoding(string error_message);
  Hex(string error_message);
  TransactionNotFound();
  HeaderHeightNotFound(u32 height);
  HeaderHashNotFound();
};

[Error]
enum FeeRateError {
  "ArithmeticOverflow"
};

[Error]
interface AddressError {
  Base58();
  Bech32();
  EmptyBech32Payload();
  InvalidBech32Variant();
  InvalidWitnessVersion(u8 version);
  UnparsableWitnessVersion();
  MalformedWitnessVersion();
  InvalidWitnessProgramLength(u64 length);
  InvalidSegwitV0ProgramLength(u64 length);
  UncompressedPubkey();
  ExcessiveScriptSize();
  UnrecognizedScript();
  UnknownAddressType(string s);
  NetworkValidation(Network required, Network found, string address);
  OtherAddressError();
};

[Error]
interface TransactionError {
  Io();
  OversizedVectorAllocation();
  InvalidChecksum(string expected, string actual);
  NonMinimalVarInt();
  ParseFailed();
  UnsupportedSegwitFlag(u8 flag);
  OtherTransactionError();
};

[Error]
interface PsbtParseError {
  PsbtEncoding(string e);
  Base64Encoding(string e);
};

[Error]
interface DescriptorError {
    InvalidHdKeyPath();
    InvalidDescriptorChecksum();
    HardenedDerivationXpub();
    MultiPath();
    Key(string e);
    Policy(string e);
    InvalidDescriptorCharacter(string char);
    Bip32(string e);
    Base58(string e);
    Pk(string e);
    Miniscript(string e);
    Hex(string e);
};

[Error]
interface TxidParseError {
  InvalidTxid(string txid);
};

// ------------------------------------------------------------------------
// bdk crate - types module
// ------------------------------------------------------------------------

enum KeychainKind {
  "External",
  "Internal",
};

dictionary AddressInfo {
  u32 index;
  Address address;
  KeychainKind keychain;
};

[Enum]
interface AddressIndex {
  New();
  LastUnused();
  Peek(u32 index);
};

dictionary Balance {
  u64 immature;

  u64 trusted_pending;

  u64 untrusted_pending;

  u64 confirmed;

  u64 trusted_spendable;

  u64 total;
};

dictionary LocalOutput {
  OutPoint outpoint;
  TxOut txout;
  KeychainKind keychain;
  boolean is_spent;
};

dictionary TxOut {
  u64 value;
  Script script_pubkey;
};

[Enum]
interface ChainPosition {
  Confirmed(u32 height, u64 timestamp);
  Unconfirmed(u64 timestamp);
};

dictionary CanonicalTx {
  Transaction transaction;
  ChainPosition chain_position;
};

// ------------------------------------------------------------------------
// bdk crate - wallet module
// ------------------------------------------------------------------------

interface FeeRate {
  [Name=from_sat_per_vb, Throws=FeeRateError]
  constructor(u64 sat_per_vb);

  [Name=from_sat_per_kwu]
  constructor(u64 sat_per_kwu);

  u64 to_sat_per_vb_ceil();

  u64 to_sat_per_vb_floor();

  u64 to_sat_per_kwu();
};

enum ChangeSpendPolicy {
  "ChangeAllowed",
  "OnlyChange",
  "ChangeForbidden"
};

interface Wallet {
  [Throws=WalletCreationError]
  constructor(Descriptor descriptor, Descriptor? change_descriptor, string persistence_backend_path, Network network);

  AddressInfo get_address(AddressIndex address_index);

  [Throws=PersistenceError]
  AddressInfo try_get_internal_address(AddressIndex address_index);

  Network network();

  Balance get_balance();

  [Throws=Alpha3Error]
  void apply_update(Update update);

  boolean is_mine([ByRef] Script script);

  [Throws=Alpha3Error]
  boolean sign(PartiallySignedTransaction psbt);

  SentAndReceivedValues sent_and_received([ByRef] Transaction tx);

  sequence<CanonicalTx> transactions();

  [Throws=TxidParseError]
  CanonicalTx? get_tx(string txid);

  [Throws=CalculateFeeError]
  u64 calculate_fee([ByRef] Transaction tx);

  [Throws=CalculateFeeError]
  FeeRate calculate_fee_rate([ByRef] Transaction tx);

  sequence<LocalOutput> list_unspent();

  sequence<LocalOutput> list_output();
};

interface Update {};

interface TxBuilder {
  constructor();

  TxBuilder add_recipient([ByRef] Script script, u64 amount);

  TxBuilder set_recipients(sequence<ScriptAmount> recipients);

  TxBuilder add_unspendable(OutPoint unspendable);

  TxBuilder unspendable(sequence<OutPoint> unspendable);

  TxBuilder add_utxo(OutPoint outpoint);

  TxBuilder change_policy(ChangeSpendPolicy change_policy);

  TxBuilder do_not_spend_change();

  TxBuilder only_spend_change();

  TxBuilder manually_selected_only();

  TxBuilder fee_rate([ByRef] FeeRate fee_rate);

  TxBuilder fee_absolute(u64 fee);

  TxBuilder drain_wallet();

  TxBuilder drain_to([ByRef] Script script);

  TxBuilder enable_rbf();

  TxBuilder enable_rbf_with_sequence(u32 nsequence);

  [Throws=Alpha3Error]
  PartiallySignedTransaction finish([ByRef] Wallet wallet);
};

interface BumpFeeTxBuilder {
  constructor(string txid, FeeRate fee_rate);

  BumpFeeTxBuilder allow_shrinking(Script script_pubkey);

  BumpFeeTxBuilder enable_rbf();

  BumpFeeTxBuilder enable_rbf_with_sequence(u32 nsequence);

  [Throws=Alpha3Error]
  PartiallySignedTransaction finish([ByRef] Wallet wallet);
};

// ------------------------------------------------------------------------
// bdk crate - descriptor module
// ------------------------------------------------------------------------

interface Mnemonic {
  constructor(WordCount word_count);

  [Name=from_string, Throws=Alpha3Error]
  constructor(string mnemonic);

  [Name=from_entropy, Throws=Alpha3Error]
  constructor(sequence<u8> entropy);

  string as_string();
};

interface DerivationPath {
  [Throws=Alpha3Error]
  constructor(string path);
};

interface DescriptorSecretKey {
  constructor(Network network, [ByRef] Mnemonic mnemonic, string? password);

  [Name=from_string, Throws=Alpha3Error]
  constructor(string secret_key);

  [Throws=Alpha3Error]
  DescriptorSecretKey derive([ByRef] DerivationPath path);

  [Throws=Alpha3Error]
  DescriptorSecretKey extend([ByRef] DerivationPath path);

  DescriptorPublicKey as_public();

  sequence<u8> secret_bytes();

  string as_string();
};

interface DescriptorPublicKey {
  [Name=from_string, Throws=Alpha3Error]
  constructor(string public_key);

  [Throws=Alpha3Error]
  DescriptorPublicKey derive([ByRef] DerivationPath path);

  [Throws=Alpha3Error]
  DescriptorPublicKey extend([ByRef] DerivationPath path);

  string as_string();
};

interface Descriptor {
  [Throws=DescriptorError]
  constructor(string descriptor, Network network);

  [Name=new_bip44]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip44_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip49]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip49_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip84]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip84_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip86]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip86_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  string as_string();

  string as_string_private();
};

// ------------------------------------------------------------------------
// bdk_esplora crate
// ------------------------------------------------------------------------

interface EsploraClient {
  constructor(string url);

  [Throws=EsploraError]
  Update full_scan(Wallet wallet, u64 stop_gap, u64 parallel_requests);

  [Throws=Alpha3Error]
  void broadcast([ByRef] Transaction transaction);
};

// ------------------------------------------------------------------------
// bdk-ffi-defined types
// ------------------------------------------------------------------------

dictionary ScriptAmount {
  Script script;
  u64 amount;
};

dictionary SentAndReceivedValues {
    u64 sent;
    u64 received;
};

// ------------------------------------------------------------------------
// bdk crate - bitcoin re-exports
// ------------------------------------------------------------------------

interface Script {
  constructor(sequence<u8> raw_output_script);

  sequence<u8> to_bytes();
};

[NonExhaustive]
enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
};

enum WordCount {
  "Words12",
  "Words15",
  "Words18",
  "Words21",
  "Words24",
};

interface Address {
  [Throws=AddressError]
  constructor(string address, Network network);

  Network network();

  Script script_pubkey();

  string to_qr_uri();

  string as_string();

  boolean is_valid_for_network(Network network);
};

interface Transaction {
  [Throws=TransactionError]
  constructor(sequence<u8> transaction_bytes);

  string txid();

  u64 size();

  u64 vsize();

  boolean is_coin_base();

  boolean is_explicitly_rbf();

  boolean is_lock_time_enabled();

  i32 version();
};

interface PartiallySignedTransaction {
  [Throws=PsbtParseError]
  constructor(string psbt_base64);

  string serialize();

  Transaction extract_tx();
};

dictionary OutPoint {
  string txid;
  u32 vout;
};
