namespace bdk {};

// ------------------------------------------------------------------------
// bdk crate - error module
// ------------------------------------------------------------------------

[Error]
interface AddressParseError {
  Base58();
  Bech32();
  WitnessVersion(string error_message);
  WitnessProgram(string error_message);
  UnknownHrp();
  LegacyAddressTooLong();
  InvalidBase58PayloadLength();
  InvalidLegacyPrefix();
  NetworkValidation();
  OtherAddressParseErr();
};

[Error]
interface Bip32Error {
    CannotDeriveFromHardenedKey();
    Secp256k1(string error_message);
    InvalidChildNumber(u32 child_number);
    InvalidChildNumberFormat();
    InvalidDerivationPathFormat();
    UnknownVersion(string version);
    WrongExtendedKeyLength(u32 length);
    Base58(string error_message);
    Hex(string error_message);
    InvalidPublicKeyHexLength(u32 length);
    UnknownError(string error_message);
};

[Error]
interface Bip39Error {
  BadWordCount(u64 word_count);
  UnknownWord(u64 index);
  BadEntropyBitCount(u64 bit_count);
  InvalidChecksum();
  AmbiguousLanguages(string languages);
};

[Error]
interface CreateTxError {
  Descriptor(string error_message);
  Policy(string error_message);
  SpendingPolicyRequired(string kind);
  Version0();
  Version1Csv();
  LockTime(string requested, string required);
  RbfSequenceCsv(string sequence, string csv);
  FeeTooLow(string required);
  FeeRateTooLow(string required);
  NoUtxosSelected();
  OutputBelowDustLimit(u64 index);
  ChangePolicyDescriptor();
  CoinSelection(string error_message);
  InsufficientFunds(u64 needed, u64 available);
  NoRecipients();
  Psbt(string error_message);
  MissingKeyOrigin(string key);
  UnknownUtxo(string outpoint);
  MissingNonWitnessUtxo(string outpoint);
  MiniscriptPsbt(string error_message);
  PushBytesError();
  LockTimeConversionError();
};

[Error]
interface DescriptorError {
    InvalidHdKeyPath();
    InvalidDescriptorChecksum();
    HardenedDerivationXpub();
    MultiPath();
    Key(string error_message);
    Policy(string error_message);
    InvalidDescriptorCharacter(string char);
    Bip32(string error_message);
    Base58(string error_message);
    Pk(string error_message);
    Miniscript(string error_message);
    Hex(string error_message);
    ExternalAndInternalAreTheSame();
};

[Error]
interface DescriptorKeyError {
  Parse(string error_message);
  InvalidKeyType();
  Bip32(string error_message);
};

[Error]
interface ElectrumError {
  IOError(string error_message);
  Json(string error_message);
  Hex(string error_message);
  Protocol(string error_message);
  Bitcoin(string error_message);
  AlreadySubscribed();
  NotSubscribed();
  InvalidResponse(string error_message);
  Message(string error_message);
  InvalidDNSNameError(string domain);
  MissingDomain();
  AllAttemptsErrored();
  SharedIOError(string error_message);
  CouldntLockReader();
  Mpsc();
  CouldNotCreateConnection(string error_message);
  RequestAlreadyConsumed();
};

[Error]
interface EsploraError {
  Minreq(string error_message);
  HttpResponse(u16 status, string error_message);
  Parsing(string error_message);
  StatusCode(string error_message);
  BitcoinEncoding(string error_message);
  HexToArray(string error_message);
  HexToBytes(string error_message);
  TransactionNotFound();
  HeaderHeightNotFound(u32 height);
  HeaderHashNotFound();
  InvalidHttpHeaderName(string name);
  InvalidHttpHeaderValue(string value);
  RequestAlreadyConsumed();
  InvalidResponse();
};

[Error]
interface FeeRateError {
  ArithmeticOverflow();
};

[Error]
interface FromScriptError {
  UnrecognizedScript();
  WitnessProgram(string error_message);
  WitnessVersion(string error_message);
  OtherFromScriptErr();
};

[Error]
interface MiniscriptError {
    AbsoluteLockTime();
    AddrError(string error_message);
    AddrP2shError(string error_message);
    AnalysisError(string error_message);
    AtOutsideOr();
    BadDescriptor(string error_message);
    BareDescriptorAddr();
    CmsTooManyKeys(u32 keys);
    ContextError(string error_message);
    CouldNotSatisfy();
    ExpectedChar(string char);
    ImpossibleSatisfaction();
    InvalidOpcode();
    InvalidPush();
    LiftError(string error_message);
    MaxRecursiveDepthExceeded();
    MissingSig();
    MultiATooManyKeys(u64 keys);
    MultiColon();
    MultipathDescLenMismatch();
    NonMinimalVerify(string error_message);
    NonStandardBareScript();
    NonTopLevel(string error_message);
    ParseThreshold();
    PolicyError(string error_message);
    PubKeyCtxError();
    RelativeLockTime();
    Script(string error_message);
    Secp(string error_message);
    Threshold();
    TrNoScriptCode();
    Trailing(string error_message);
    TypeCheck(string error_message);
    Unexpected(string error_message);
    UnexpectedStart();
    UnknownWrapper(string char);
    Unprintable(u8 byte);
};

[Error]
interface ParseAmountError {
  OutOfRange();
  TooPrecise();
  MissingDigits();
  InputTooLarge();
  InvalidCharacter(string error_message);
  OtherParseAmountErr();
};

[Error]
interface PersistenceError {
  Write(string error_message);
};

[Error]
interface PsbtError {
  InvalidMagic();
  MissingUtxo();
  InvalidSeparator();
  PsbtUtxoOutOfBounds();
  InvalidKey(string key);
  InvalidProprietaryKey();
  DuplicateKey(string key);
  UnsignedTxHasScriptSigs();
  UnsignedTxHasScriptWitnesses();
  MustHaveUnsignedTx();
  NoMorePairs();
  UnexpectedUnsignedTx();
  NonStandardSighashType(u32 sighash);
  InvalidHash(string hash);
  InvalidPreimageHashPair();
  CombineInconsistentKeySources(string xpub);
  ConsensusEncoding(string encoding_error);
  NegativeFee();
  FeeOverflow();
  InvalidPublicKey(string error_message);
  InvalidSecp256k1PublicKey(string secp256k1_error);
  InvalidXOnlyPublicKey();
  InvalidEcdsaSignature(string error_message);
  InvalidTaprootSignature(string error_message);
  InvalidControlBlock();
  InvalidLeafVersion();
  Taproot();
  TapTree(string error_message);
  XPubKey();
  Version(string error_message);
  PartialDataConsumption();
  Io(string error_message);
  OtherPsbtErr();
};

[Error]
interface PsbtParseError {
  PsbtEncoding(string error_message);
  Base64Encoding(string error_message);
};

[Error]
interface PsbtFinalizeError {
  InputError(string reason, u32 index);
  WrongInputCount(u32 in_tx, u32 in_map);
  InputIdxOutofBounds(u32 psbt_inp, u32 requested);
};

[Error]
interface RequestBuilderError {
  RequestAlreadyConsumed();
};

[Error]
interface TransactionError {
  Io();
  OversizedVectorAllocation();
  InvalidChecksum(string expected, string actual);
  NonMinimalVarInt();
  ParseFailed();
  UnsupportedSegwitFlag(u8 flag);
  OtherTransactionErr();
};

// ------------------------------------------------------------------------
// bdk_wallet crate - types module
// ------------------------------------------------------------------------

typedef enum KeychainKind;

/// Builds a [`FullScanRequest`].
interface FullScanRequestBuilder {
  [Throws=RequestBuilderError]
  FullScanRequestBuilder inspect_spks_for_all_keychains(FullScanScriptInspector inspector);

  [Throws=RequestBuilderError]
  FullScanRequest build();
};

/// Builds a [`SyncRequest`].
interface SyncRequestBuilder {
  [Throws=RequestBuilderError]
  SyncRequestBuilder inspect_spks(SyncScriptInspector inspector);

  [Throws=RequestBuilderError]
  SyncRequest build();
};

interface FullScanRequest {};

interface SyncRequest {};

[Trait, WithForeign]
interface SyncScriptInspector {
  void inspect(Script script, u64 total);
};

[Trait, WithForeign]
interface FullScanScriptInspector {
  void inspect(KeychainKind keychain, u32 index, Script script);
};

/// A changeset for [`Wallet`].
[Remote]
interface ChangeSet {};

// ------------------------------------------------------------------------
// bdk_wallet crate - wallet module
// ------------------------------------------------------------------------

interface Policy {
  string id();
  
  string as_string();

  boolean requires_path();
  
  SatisfiableItem item();
  
  Satisfaction satisfaction();

  Satisfaction contribution();
};

[Enum]
interface SatisfiableItem {
  EcdsaSignature(PkOrF key);
  SchnorrSignature(PkOrF key);
  Sha256Preimage(string hash);
  Hash256Preimage(string hash);
  Ripemd160Preimage(string hash);
  Hash160Preimage(string hash);
  AbsoluteTimelock(LockTime value);
  RelativeTimelock(u32 value);
  Multisig(sequence<PkOrF> keys, u64 threshold);
  Thresh(sequence<Policy> items, u64 threshold);
};

[Enum]
interface PkOrF {
  Pubkey(string value);
  XOnlyPubkey(string value);
  Fingerprint(string value);
};

[Enum]
interface LockTime {
  Blocks(u32 height);
  Seconds(u32 consensus_time);
};

[Enum]
interface Satisfaction {
    Partial(u64 n, u64 m, sequence<u64> items, boolean? sorted, record<u32, sequence<Condition>> conditions);
    PartialComplete(u64 n, u64 m, sequence<u64> items, boolean? sorted, record<sequence<u32>, sequence<Condition>> conditions);
    Complete(Condition condition);
    None(string msg);
};

typedef record Condition;

// ------------------------------------------------------------------------
// bdk_wallet crate - bitcoin re-exports
// ------------------------------------------------------------------------

[Remote]
enum WordCount {
  "Words12",
  "Words15",
  "Words18",
  "Words21",
  "Words24",
};

typedef interface Script;

[NonExhaustive, Remote]
enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
  "Testnet4",
};
