namespace bdk {
    string hello_world();
};

enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
};

[Error]
enum BdkError {
  "Generic",
  "NoRecipients",
  "NoUtxosSelected",
  "OutputBelowDustLimit",
  "InsufficientFunds",
  "BnBTotalTriesExceeded",
  "BnBNoExactMatch",
  "UnknownUtxo",
  "TransactionNotFound",
  "TransactionConfirmed",
  "IrreplaceableTransaction",
  "FeeRateTooLow",
  "FeeTooLow",
  "FeeRateUnavailable",
  "MissingKeyOrigin",
  "Key",
  "ChecksumMismatch",
  "SpendingPolicyRequired",
  "InvalidPolicyPathError",
  "Signer",
  "InvalidOutpoint",
  "Descriptor",
  "Miniscript",
  "MiniscriptPsbt",
  "Bip32",
  "Psbt",
};

interface DerivationPath {
  [Throws=BdkError]
  constructor(string path);
};

enum WordCount {
  "Words12",
  "Words15",
  "Words18",
  "Words21",
  "Words24",
};

interface Mnemonic {
  constructor(WordCount word_count);

  [Name=from_string, Throws=BdkError]
  constructor(string mnemonic);

  [Name=from_entropy, Throws=BdkError]
  constructor(sequence<u8> entropy);

  string as_string();
};

interface DescriptorSecretKey {
  constructor(Network network, Mnemonic mnemonic, string? password);

  [Name=from_string, Throws=BdkError]
  constructor(string secret_key);

  [Throws=BdkError]
  DescriptorSecretKey derive(DerivationPath path);

  [Throws=BdkError]
  DescriptorSecretKey extend(DerivationPath path);

  DescriptorPublicKey as_public();

  sequence<u8> secret_bytes();

  string as_string();
};

interface DescriptorPublicKey {
  [Name=from_string, Throws=BdkError]
  constructor(string public_key);

  [Throws=BdkError]
  DescriptorPublicKey derive(DerivationPath path);

  [Throws=BdkError]
  DescriptorPublicKey extend(DerivationPath path);

  string as_string();
};

enum KeychainKind {
  "External",
  "Internal",
};

interface Descriptor {
  [Throws=BdkError]
  constructor(string descriptor, Network network);

  [Name=new_bip44]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip44_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip49]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip49_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip84]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip84_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip86]
  constructor(DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip86_public]
  constructor(DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  string as_string();

  string as_string_private();
};


interface Wallet {
  [Throws=BdkError]
  constructor(Descriptor descriptor, Descriptor? change_descriptor, Network network, WalletType wallet_type);

  AddressInfo get_address(AddressIndex address_index);

  Balance get_balance();

  Network network();
};

enum WalletType {
  "Memory",
  "FlatFile",
};

interface Address {
  [Throws=BdkError]
  constructor(string address, Network network);

  string as_string();

  Network network();
};

dictionary AddressInfo {
  u32 index;
  Address address;
  KeychainKind keychain;
};

[Enum]
interface AddressIndex {
  New();
  LastUnused();
  Peek(u32 index);
};


interface Balance {
  u64 immature();
  u64 trusted_pending();
  u64 untrusted_pending();
  u64 confirmed();
  u64 trusted_spendable();
  u64 total();
};