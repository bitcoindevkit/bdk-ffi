namespace bdk {};

// ------------------------------------------------------------------------
// bdk crate - error module
// ------------------------------------------------------------------------

[Error]
interface AddressParseError {
  Base58();
  Bech32();
  WitnessVersion(string error_message);
  WitnessProgram(string error_message);
  UnknownHrp();
  LegacyAddressTooLong();
  InvalidBase58PayloadLength();
  InvalidLegacyPrefix();
  NetworkValidation();
  OtherAddressParseErr();
};

[Error]
interface Bip32Error {
    CannotDeriveFromHardenedKey();
    Secp256k1(string error_message);
    InvalidChildNumber(u32 child_number);
    InvalidChildNumberFormat();
    InvalidDerivationPathFormat();
    UnknownVersion(string version);
    WrongExtendedKeyLength(u32 length);
    Base58(string error_message);
    Hex(string error_message);
    InvalidPublicKeyHexLength(u32 length);
    UnknownError(string error_message);
};

[Error]
interface Bip39Error {
  BadWordCount(u64 word_count);
  UnknownWord(u64 index);
  BadEntropyBitCount(u64 bit_count);
  InvalidChecksum();
  AmbiguousLanguages(string languages);
};

[Error]
interface CalculateFeeError {
  MissingTxOut(sequence<OutPoint> out_points);
  NegativeFee(string amount);
};

[Error]
interface CannotConnectError {
  Include(u32 height);
};

[Error]
interface CreateTxError {
  Descriptor(string error_message);
  Policy(string error_message);
  SpendingPolicyRequired(string kind);
  Version0();
  Version1Csv();
  LockTime(string requested, string required);
  RbfSequenceCsv(string sequence, string csv);
  FeeTooLow(string required);
  FeeRateTooLow(string required);
  NoUtxosSelected();
  OutputBelowDustLimit(u64 index);
  ChangePolicyDescriptor();
  CoinSelection(string error_message);
  InsufficientFunds(u64 needed, u64 available);
  NoRecipients();
  Psbt(string error_message);
  MissingKeyOrigin(string key);
  UnknownUtxo(string outpoint);
  MissingNonWitnessUtxo(string outpoint);
  MiniscriptPsbt(string error_message);
};

[Error]
interface CreateWithPersistError {
  Persist(string error_message);
  DataAlreadyExists();
  Descriptor(string error_message);
};

[Error]
interface DescriptorError {
    InvalidHdKeyPath();
    InvalidDescriptorChecksum();
    HardenedDerivationXpub();
    MultiPath();
    Key(string error_message);
    Policy(string error_message);
    InvalidDescriptorCharacter(string char);
    Bip32(string error_message);
    Base58(string error_message);
    Pk(string error_message);
    Miniscript(string error_message);
    Hex(string error_message);
    ExternalAndInternalAreTheSame();
};

[Error]
interface DescriptorKeyError {
  Parse(string error_message);
  InvalidKeyType();
  Bip32(string error_message);
};

[Error]
interface ElectrumError {
  IOError(string error_message);
  Json(string error_message);
  Hex(string error_message);
  Protocol(string error_message);
  Bitcoin(string error_message);
  AlreadySubscribed();
  NotSubscribed();
  InvalidResponse(string error_message);
  Message(string error_message);
  InvalidDNSNameError(string domain);
  MissingDomain();
  AllAttemptsErrored();
  SharedIOError(string error_message);
  CouldntLockReader();
  Mpsc();
  CouldNotCreateConnection(string error_message);
  RequestAlreadyConsumed();
};

[Error]
interface EsploraError {
  Minreq(string error_message);
  HttpResponse(u16 status, string error_message);
  Parsing(string error_message);
  StatusCode(string error_message);
  BitcoinEncoding(string error_message);
  HexToArray(string error_message);
  HexToBytes(string error_message);
  TransactionNotFound();
  HeaderHeightNotFound(u32 height);
  HeaderHashNotFound();
  InvalidHttpHeaderName(string name);
  InvalidHttpHeaderValue(string value);
  RequestAlreadyConsumed();
};

[Error]
interface ExtractTxError {
  AbsurdFeeRate(u64 fee_rate);
  MissingInputValue();
  SendingTooMuch();
  OtherExtractTxErr();
};

[Error]
interface FromScriptError {
  UnrecognizedScript();
  WitnessProgram(string error_message);
  WitnessVersion(string error_message);
  OtherFromScriptErr();
};

[Error]
interface LoadWithPersistError {
    Persist(string error_message);
    InvalidChangeSet(string error_message);
    CouldNotLoad();
};

[Error]
interface PersistenceError {
  Write(string error_message);
};

[Error]
interface PsbtError {
  InvalidMagic();
  MissingUtxo();
  InvalidSeparator();
  PsbtUtxoOutOfBounds();
  InvalidKey(string key);
  InvalidProprietaryKey();
  DuplicateKey(string key);
  UnsignedTxHasScriptSigs();
  UnsignedTxHasScriptWitnesses();
  MustHaveUnsignedTx();
  NoMorePairs();
  UnexpectedUnsignedTx();
  NonStandardSighashType(u32 sighash);
  InvalidHash(string hash);
  InvalidPreimageHashPair();
  CombineInconsistentKeySources(string xpub);
  ConsensusEncoding(string encoding_error);
  NegativeFee();
  FeeOverflow();
  InvalidPublicKey(string error_message);
  InvalidSecp256k1PublicKey(string secp256k1_error);
  InvalidXOnlyPublicKey();
  InvalidEcdsaSignature(string error_message);
  InvalidTaprootSignature(string error_message);
  InvalidControlBlock();
  InvalidLeafVersion();
  Taproot();
  TapTree(string error_message);
  XPubKey();
  Version(string error_message);
  PartialDataConsumption();
  Io(string error_message);
  OtherPsbtErr();
};

[Error]
interface PsbtParseError {
  PsbtEncoding(string error_message);
  Base64Encoding(string error_message);
};

[Error]
interface RequestBuilderError {
  RequestAlreadyConsumed();
};

[Error]
interface SignerError {
    MissingKey();
    InvalidKey();
    UserCanceled();
    InputIndexOutOfRange();
    MissingNonWitnessUtxo();
    InvalidNonWitnessUtxo();
    MissingWitnessUtxo();
    MissingWitnessScript();
    MissingHdKeypath();
    NonStandardSighash();
    InvalidSighash();
    SighashP2wpkh(string error_message);
    SighashTaproot(string error_message);
    TxInputsIndexError(string error_message);
    MiniscriptPsbt(string error_message);
    External(string error_message);
    Psbt(string error_message);
};

[Error]
interface SqliteError {
  Sqlite(string rusqlite_error);
};

[Error]
interface TransactionError {
  Io();
  OversizedVectorAllocation();
  InvalidChecksum(string expected, string actual);
  NonMinimalVarInt();
  ParseFailed();
  UnsupportedSegwitFlag(u8 flag);
  OtherTransactionErr();
};

[Error]
interface TxidParseError {
  InvalidTxid(string txid);
};

// ------------------------------------------------------------------------
// bdk_wallet crate - types module
// ------------------------------------------------------------------------

enum KeychainKind {
  "External",
  "Internal",
};

dictionary AddressInfo {
  u32 index;
  Address address;
  KeychainKind keychain;
};

dictionary Balance {
  Amount immature;

  Amount trusted_pending;

  Amount untrusted_pending;

  Amount confirmed;

  Amount trusted_spendable;

  Amount total;
};

dictionary LocalOutput {
  OutPoint outpoint;
  TxOut txout;
  KeychainKind keychain;
  boolean is_spent;
};

dictionary TxOut {
  u64 value;
  Script script_pubkey;
};

[Enum]
interface ChainPosition {
  Confirmed(ConfirmationBlockTime confirmation_block_time);
  Unconfirmed(u64 timestamp);
};

dictionary ConfirmationBlockTime {
  BlockId block_id;
  u64 confirmation_time;
};

dictionary BlockId {
  u32 height;
  string hash;
};

dictionary CanonicalTx {
  Transaction transaction;
  ChainPosition chain_position;
};

interface FullScanRequestBuilder {
  [Throws=RequestBuilderError]
  FullScanRequestBuilder inspect_spks_for_all_keychains(FullScanScriptInspector inspector);

  [Throws=RequestBuilderError]
  FullScanRequest build();
};

interface SyncRequestBuilder {
  [Throws=RequestBuilderError]
  SyncRequestBuilder inspect_spks(SyncScriptInspector inspector);

  [Throws=RequestBuilderError]
  SyncRequest build();
};

interface FullScanRequest {};

interface SyncRequest {};

[Trait, WithForeign]
interface SyncScriptInspector {
  void inspect(Script script, u64 total);
};

[Trait, WithForeign]
interface FullScanScriptInspector {
  void inspect(KeychainKind keychain, u32 index, Script script);
};

interface ChangeSet {};

// ------------------------------------------------------------------------
// bdk_wallet crate - wallet module
// ------------------------------------------------------------------------

enum ChangeSpendPolicy {
  "ChangeAllowed",
  "OnlyChange",
  "ChangeForbidden"
};

interface Wallet {
  [Throws=CreateWithPersistError]
  constructor(Descriptor descriptor, Descriptor change_descriptor, Network network, Connection connection);

  [Name=load, Throws=LoadWithPersistError]
  constructor(Descriptor descriptor, Descriptor change_descriptor, Connection connection);

  void cancel_tx([ByRef] Transaction tx);

  u32? derivation_index(KeychainKind keychain);

  LocalOutput? get_utxo(OutPoint op);

  KeychainAndIndex? derivation_of_spk(Script spk);

  AddressInfo reveal_next_address(KeychainKind keychain);

  AddressInfo peek_address(KeychainKind keychain, u32 index);

  u32 next_derivation_index(KeychainKind keychain);

  AddressInfo next_unused_address(KeychainKind keychain);

  boolean mark_used(KeychainKind keychain, u32 index);

  sequence<AddressInfo> reveal_addresses_to(KeychainKind keychain, u32 index);

  sequence<AddressInfo> list_unused_addresses(KeychainKind keychain);

  Network network();

  string descriptor_checksum(KeychainKind keychain);

  [Throws=DescriptorError]
  Policy? policies(KeychainKind keychain);

  Balance balance();

  [Throws=CannotConnectError]
  void apply_update(Update update);

  boolean is_mine(Script script);

  [Throws=SignerError]
  boolean sign(Psbt psbt);

  [Throws=SignerError]
  boolean finalize_psbt(Psbt psbt);

  SentAndReceivedValues sent_and_received([ByRef] Transaction tx);

  sequence<CanonicalTx> transactions();

  [Throws=TxidParseError]
  CanonicalTx? get_tx(string txid);

  [Throws=CalculateFeeError]
  Amount calculate_fee([ByRef] Transaction tx);

  [Throws=CalculateFeeError]
  FeeRate calculate_fee_rate([ByRef] Transaction tx);

  sequence<LocalOutput> list_unspent();

  sequence<LocalOutput> list_output();

  FullScanRequestBuilder start_full_scan();

  SyncRequestBuilder start_sync_with_revealed_spks();

  [Throws=SqliteError]
  boolean persist(Connection connection);
};

interface Update {};

interface Policy {
  string id();
  
  string as_string();

  boolean requires_path();
  
  SatisfiableItem item();
  
  Satisfaction satisfaction();

  Satisfaction contribution();
};

[Enum]
interface SatisfiableItem {
  EcdsaSignature(PkOrF key);
  SchnorrSignature(PkOrF key);
  Sha256Preimage(string hash);
  Hash256Preimage(string hash);
  Ripemd160Preimage(string hash);
  Hash160Preimage(string hash);
  AbsoluteTimelock(LockTime value);
  RelativeTimelock(u32 value);
  Multisig(sequence<PkOrF> keys, u64 threshold);
  Thresh(sequence<Policy> items, u64 threshold);
};

[Enum]
interface PkOrF {
  Pubkey(string value);
  XOnlyPubkey(string value);
  Fingerprint(string value);
};

[Enum]
interface LockTime {
  Blocks(u32 height);
  Seconds(u32 consensus_time);
};

[Enum]
interface Satisfaction {
    Partial(u64 n, u64 m, sequence<u64> items, boolean? sorted, record<u32, sequence<Condition>> conditions);
    PartialComplete(u64 n, u64 m, sequence<u64> items, boolean? sorted, record<sequence<u32>, sequence<Condition>> conditions);
    Complete(Condition condition);
    None(string msg);
};

dictionary Condition {
  u32? csv;
  LockTime? timelock;
};

interface TxBuilder {
  constructor();

  TxBuilder add_global_xpubs();

  TxBuilder add_recipient([ByRef] Script script, Amount amount);

  TxBuilder set_recipients(sequence<ScriptAmount> recipients);

  TxBuilder add_unspendable(OutPoint unspendable);

  TxBuilder unspendable(sequence<OutPoint> unspendable);

  TxBuilder add_utxo(OutPoint outpoint);

  TxBuilder policy_path(record<string, sequence<u64>> policy_path, KeychainKind keychain);

  TxBuilder change_policy(ChangeSpendPolicy change_policy);

  TxBuilder do_not_spend_change();

  TxBuilder only_spend_change();

  TxBuilder manually_selected_only();

  TxBuilder fee_rate([ByRef] FeeRate fee_rate);

  TxBuilder fee_absolute(Amount fee);

  TxBuilder drain_wallet();

  TxBuilder drain_to([ByRef] Script script);

  TxBuilder set_exact_sequence(u32 nsequence);

  [Throws=CreateTxError]
  Psbt finish([ByRef] Wallet wallet);
};

interface BumpFeeTxBuilder {
  constructor(string txid, FeeRate fee_rate);

  BumpFeeTxBuilder set_exact_sequence(u32 nsequence);

  [Throws=CreateTxError]
  Psbt finish([ByRef] Wallet wallet);
};

// ------------------------------------------------------------------------
// bdk_sqlite crate
// ------------------------------------------------------------------------

interface Connection {
  [Throws=SqliteError]
  constructor(string path);

  [Name=new_in_memory, Throws=SqliteError]
  constructor();
};

// ------------------------------------------------------------------------
// bdk crate - descriptor module
// ------------------------------------------------------------------------

[Traits=(Display)]
interface Mnemonic {
  constructor(WordCount word_count);

  [Name=from_string, Throws=Bip39Error]
  constructor(string mnemonic);

  [Name=from_entropy, Throws=Bip39Error]
  constructor(sequence<u8> entropy);
};

interface DerivationPath {
  [Throws=Bip32Error]
  constructor(string path);
};

interface DescriptorSecretKey {
  constructor(Network network, [ByRef] Mnemonic mnemonic, string? password);

  [Name=from_string, Throws=DescriptorKeyError]
  constructor(string secret_key);

  [Throws=DescriptorKeyError]
  DescriptorSecretKey derive([ByRef] DerivationPath path);

  [Throws=DescriptorKeyError]
  DescriptorSecretKey extend([ByRef] DerivationPath path);

  DescriptorPublicKey as_public();

  sequence<u8> secret_bytes();

  string as_string();
};

interface DescriptorPublicKey {
  [Name=from_string, Throws=DescriptorKeyError]
  constructor(string public_key);

  [Throws=DescriptorKeyError]
  DescriptorPublicKey derive([ByRef] DerivationPath path);

  [Throws=DescriptorKeyError]
  DescriptorPublicKey extend([ByRef] DerivationPath path);

  string as_string();
};

[Traits=(Display)]
interface Descriptor {
  [Throws=DescriptorError]
  constructor(string descriptor, Network network);

  [Name=new_bip44]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip44_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip49]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip49_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip84]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip84_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  [Name=new_bip86]
  constructor([ByRef] DescriptorSecretKey secret_key, KeychainKind keychain, Network network);

  [Name=new_bip86_public]
  constructor([ByRef] DescriptorPublicKey public_key, string fingerprint, KeychainKind keychain, Network network);

  string to_string_with_secret();
};

// ------------------------------------------------------------------------
// bdk_esplora crate
// ------------------------------------------------------------------------

interface EsploraClient {
  constructor(string url);

  [Throws=EsploraError]
  Update full_scan(FullScanRequest full_scan_request, u64 stop_gap, u64 parallel_requests);

  [Throws=EsploraError]
  Update sync(SyncRequest sync_request, u64 parallel_requests);

  [Throws=EsploraError]
  void broadcast([ByRef] Transaction transaction);

  [Throws=EsploraError]
  Transaction? get_tx(string txid);

  [Throws=EsploraError]
  u32 get_height();
};

// ------------------------------------------------------------------------
// bdk_electrum crate
// ------------------------------------------------------------------------

interface ElectrumClient {
  [Throws=ElectrumError]
  constructor(string url);

  [Throws=ElectrumError]
  Update full_scan(FullScanRequest full_scan_request, u64 stop_gap, u64 batch_size, boolean fetch_prev_txouts);

  [Throws=ElectrumError]
  Update sync(SyncRequest sync_request, u64 batch_size, boolean fetch_prev_txouts);

  [Throws=ElectrumError]
  string broadcast([ByRef] Transaction transaction);
};

// ------------------------------------------------------------------------
// bdk-ffi-defined types
// ------------------------------------------------------------------------

dictionary ScriptAmount {
  Script script;
  Amount amount;
};

dictionary SentAndReceivedValues {
    Amount sent;
    Amount received;
};

dictionary KeychainAndIndex {
    KeychainKind keychain;
    u32 index;
};

// ------------------------------------------------------------------------
// bdk_wallet crate - bitcoin re-exports
// ------------------------------------------------------------------------

enum WordCount {
  "Words12",
  "Words15",
  "Words18",
  "Words21",
  "Words24",
};

[Traits=(Display)]
interface Address {
  [Throws=AddressParseError]
  constructor(string address, Network network);

  [Name=from_script, Throws=FromScriptError]
  constructor(Script script, Network network);

  Script script_pubkey();

  string to_qr_uri();

  boolean is_valid_for_network(Network network);
};

interface Transaction {
  [Throws=TransactionError]
  constructor(sequence<u8> transaction_bytes);

  string compute_txid();

  u64 total_size();

  u64 vsize();

  boolean is_coinbase();

  boolean is_explicitly_rbf();

  boolean is_lock_time_enabled();

  i32 version();

  sequence<u8> serialize();

  u64 weight();

  sequence<TxIn> input();

  sequence<TxOut> output();

  u32 lock_time();
};

interface Psbt {
  [Throws=PsbtParseError]
  constructor(string psbt_base64);

  string serialize();

  [Throws=ExtractTxError]
  Transaction extract_tx();

  [Throws=PsbtError]
  u64 fee();

  [Throws=PsbtError]
  Psbt combine(Psbt other);

  string json_serialize();
};

dictionary TxIn {
  OutPoint previous_output;
  Script script_sig;
  u32 sequence;
  sequence<sequence<u8>> witness;
};

// ------------------------------------------------------------------------
// types defined in external crate bitcoin-ffi
// ------------------------------------------------------------------------

[ExternalInterface="bitcoin_ffi"]
typedef extern Script;

[External="bitcoin_ffi"]
typedef extern Network;

[ExternalInterface="bitcoin_ffi"]
typedef extern Amount;

[ExternalInterface="bitcoin_ffi"]
typedef extern FeeRate;

[External="bitcoin_ffi"]
typedef extern Txid;

[External="bitcoin_ffi"]
typedef extern OutPoint;

[ExternalInterface="bitcoin_ffi"]
typedef extern FeeRateError;

[ExternalInterface="bitcoin_ffi"]
typedef extern ParseAmountError;
